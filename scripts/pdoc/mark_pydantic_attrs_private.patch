--- ./original.py	2024-11-08 15:18:37.493768700 +0100
+++ ./patched.py	2024-11-08 15:13:54.288887700 +0100
@@ -121,14 +121,14 @@
     # `GenerateSchema.model_schema` to work for a plain `BaseModel` annotation.
 
     model_config: ClassVar[ConfigDict] = ConfigDict()
-    """
+    """@private
     Configuration for the model, should be a dictionary conforming to [`ConfigDict`][pydantic.config.ConfigDict].
     """
 
     # Because `dict` is in the local namespace of the `BaseModel` class, we use `Dict` for annotations.
     # TODO v3 fallback to `dict` when the deprecated `dict` method gets removed.
     model_fields: ClassVar[Dict[str, FieldInfo]] = {}  # noqa: UP006
-    """
+    """@private
     Metadata about the fields defined on the model,
     mapping of field names to [`FieldInfo`][pydantic.fields.FieldInfo] objects.
 
@@ -136,7 +136,7 @@
     """
 
     model_computed_fields: ClassVar[Dict[str, ComputedFieldInfo]] = {}  # noqa: UP006
-    """A dictionary of computed field names and their corresponding `ComputedFieldInfo` objects."""
+    """@private A dictionary of computed field names and their corresponding `ComputedFieldInfo` objects."""
 
     __class_vars__: ClassVar[set[str]]
     """The names of the class variables defined on the model."""
