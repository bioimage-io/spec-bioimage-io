{
    "$defs": {
        "ArchitectureFromFileDescr": {
            "additionalProperties": false,
            "properties": {
                "source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        }
                    ],
                    "description": "\u2208\ud83d\udce6 file source",
                    "title": "Source"
                },
                "sha256": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "SHA256 checksum of the source file",
                    "title": "Sha256"
                },
                "callable": {
                    "description": "Identifier of the callable that returns a torch.nn.Module instance.",
                    "examples": [
                        "MyNetworkClass",
                        "get_my_model"
                    ],
                    "title": "Callable",
                    "type": "string"
                },
                "kwargs": {
                    "additionalProperties": {
                        "$ref": "#/$defs/YamlValue"
                    },
                    "description": "key word arguments for the `callable`",
                    "title": "Kwargs",
                    "type": "object"
                }
            },
            "required": [
                "source",
                "callable"
            ],
            "title": "ArchitectureFromFileDescr",
            "type": "object"
        },
        "ArchitectureFromLibraryDescr": {
            "additionalProperties": false,
            "properties": {
                "callable": {
                    "description": "Identifier of the callable that returns a torch.nn.Module instance.",
                    "examples": [
                        "MyNetworkClass",
                        "get_my_model"
                    ],
                    "title": "Callable",
                    "type": "string"
                },
                "kwargs": {
                    "additionalProperties": {
                        "$ref": "#/$defs/YamlValue"
                    },
                    "description": "key word arguments for the `callable`",
                    "title": "Kwargs",
                    "type": "object"
                },
                "import_from": {
                    "description": "Where to import the callable from, i.e. `from <import_from> import <callable>`",
                    "title": "Import From",
                    "type": "string"
                }
            },
            "required": [
                "callable",
                "import_from"
            ],
            "title": "ArchitectureFromLibraryDescr",
            "type": "object"
        },
        "AttachmentsDescr": {
            "additionalProperties": true,
            "properties": {
                "files": {
                    "description": "\u2208\ud83d\udce6 File attachments",
                    "items": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "$ref": "#/$defs/RelativeFilePath"
                            },
                            {
                                "format": "file-path",
                                "type": "string"
                            }
                        ]
                    },
                    "title": "Files",
                    "type": "array"
                }
            },
            "title": "AttachmentsDescr",
            "type": "object"
        },
        "Author": {
            "additionalProperties": false,
            "properties": {
                "affiliation": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Affiliation",
                    "title": "Affiliation"
                },
                "email": {
                    "anyOf": [
                        {
                            "format": "email",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Email",
                    "title": "Email"
                },
                "orcid": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "An [ORCID iD](https://support.orcid.org/hc/en-us/sections/360001495313-What-is-ORCID\n) in hyphenated groups of 4 digits, (and [valid](\nhttps://support.orcid.org/hc/en-us/articles/360006897674-Structure-of-the-ORCID-Identifier\n) as per ISO 7064 11,2.)",
                    "examples": [
                        "0000-0001-2345-6789"
                    ],
                    "title": "Orcid"
                },
                "name": {
                    "title": "Name",
                    "type": "string"
                },
                "github_user": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "title": "Github User"
                }
            },
            "required": [
                "name"
            ],
            "title": "Author",
            "type": "object"
        },
        "BadgeDescr": {
            "additionalProperties": false,
            "description": "A custom badge",
            "properties": {
                "label": {
                    "description": "badge label to display on hover",
                    "examples": [
                        "Open in Colab"
                    ],
                    "title": "Label",
                    "type": "string"
                },
                "icon": {
                    "anyOf": [
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "type": "string"
                        },
                        {
                            "format": "uri",
                            "maxLength": 2083,
                            "minLength": 1,
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "badge icon",
                    "examples": [
                        "https://colab.research.google.com/assets/colab-badge.svg"
                    ],
                    "title": "Icon"
                },
                "url": {
                    "description": "target URL",
                    "examples": [
                        "https://colab.research.google.com/github/HenriquesLab/ZeroCostDL4Mic/blob/master/Colab_notebooks/U-net_2D_ZeroCostDL4Mic.ipynb"
                    ],
                    "title": "Url",
                    "type": "string"
                }
            },
            "required": [
                "label",
                "url"
            ],
            "title": "Custom badge",
            "type": "object"
        },
        "BatchAxis": {
            "additionalProperties": false,
            "properties": {
                "id": {
                    "default": "batch",
                    "title": "Id",
                    "type": "string"
                },
                "description": {
                    "default": "",
                    "maxLength": 128,
                    "title": "Description",
                    "type": "string"
                },
                "type": {
                    "const": "batch",
                    "default": "batch",
                    "enum": [
                        "batch"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "size": {
                    "anyOf": [
                        {
                            "const": 1,
                            "enum": [
                                1
                            ],
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The batch size may be fixed to 1,\notherwise (the default) it may be chosen arbitrarily depending on available memory",
                    "title": "Size"
                }
            },
            "title": "BatchAxis",
            "type": "object"
        },
        "BinarizeAlongAxisKwargs": {
            "additionalProperties": false,
            "description": "key word arguments for `BinarizeDescr`",
            "properties": {
                "threshold": {
                    "description": "The fixed threshold values along `axis`",
                    "items": {
                        "type": "number"
                    },
                    "minItems": 1,
                    "title": "Threshold",
                    "type": "array"
                },
                "axis": {
                    "description": "The `threshold` axis",
                    "examples": [
                        "channel"
                    ],
                    "title": "Axis",
                    "type": "string"
                }
            },
            "required": [
                "threshold",
                "axis"
            ],
            "title": "BinarizeAlongAxisKwargs",
            "type": "object"
        },
        "BinarizeKwargs": {
            "additionalProperties": false,
            "description": "key word arguments for `BinarizeDescr`",
            "properties": {
                "threshold": {
                    "description": "The fixed threshold",
                    "title": "Threshold",
                    "type": "number"
                }
            },
            "required": [
                "threshold"
            ],
            "title": "BinarizeKwargs",
            "type": "object"
        },
        "ChannelAxis": {
            "additionalProperties": false,
            "properties": {
                "id": {
                    "default": "channel",
                    "title": "Id",
                    "type": "string"
                },
                "description": {
                    "default": "",
                    "maxLength": 128,
                    "title": "Description",
                    "type": "string"
                },
                "type": {
                    "const": "channel",
                    "default": "channel",
                    "enum": [
                        "channel"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "channel_names": {
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "title": "Channel Names",
                    "type": "array"
                }
            },
            "required": [
                "channel_names"
            ],
            "title": "ChannelAxis",
            "type": "object"
        },
        "CiteEntry": {
            "additionalProperties": false,
            "properties": {
                "text": {
                    "description": "free text description",
                    "title": "Text",
                    "type": "string"
                },
                "doi": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A digital object identifier (DOI) is the prefered citation reference.\nSee https://www.doi.org/ for details. (alternatively specify `url`)",
                    "title": "Doi"
                },
                "url": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URL to cite (preferably specify a `doi` instead)",
                    "title": "Url"
                }
            },
            "required": [
                "text"
            ],
            "title": "CiteEntry",
            "type": "object"
        },
        "ClipKwargs": {
            "additionalProperties": false,
            "description": "key word arguments for `ClipDescr`",
            "properties": {
                "min": {
                    "description": "minimum value for clipping",
                    "title": "Min",
                    "type": "number"
                },
                "max": {
                    "description": "maximum value for clipping",
                    "title": "Max",
                    "type": "number"
                }
            },
            "required": [
                "min",
                "max"
            ],
            "title": "ClipKwargs",
            "type": "object"
        },
        "DataDependentSize": {
            "additionalProperties": false,
            "properties": {
                "min": {
                    "default": 1,
                    "exclusiveMinimum": 0,
                    "title": "Min",
                    "type": "integer"
                },
                "max": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 1,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "title": "Max"
                }
            },
            "title": "DataDependentSize",
            "type": "object"
        },
        "Datetime": {
            "description": "Timestamp in [ISO 8601](#https://en.wikipedia.org/wiki/ISO_8601) format\nwith a few restrictions listed [here](https://docs.python.org/3/library/datetime.html#datetime.datetime.fromisoformat).",
            "format": "date-time",
            "title": "Datetime",
            "type": "string"
        },
        "EnsureDtypeDescr": {
            "additionalProperties": false,
            "description": "cast the tensor data type to `EnsureDtypeKwargs.dtype` (if not matching)",
            "properties": {
                "id": {
                    "const": "ensure_dtype",
                    "default": "ensure_dtype",
                    "enum": [
                        "ensure_dtype"
                    ],
                    "title": "Id",
                    "type": "string"
                },
                "kwargs": {
                    "$ref": "#/$defs/EnsureDtypeKwargs"
                }
            },
            "required": [
                "kwargs"
            ],
            "title": "EnsureDtypeDescr",
            "type": "object"
        },
        "EnsureDtypeKwargs": {
            "additionalProperties": false,
            "description": "key word arguments for `EnsureDtypeDescr`",
            "properties": {
                "dtype": {
                    "enum": [
                        "float32",
                        "float64",
                        "uint8",
                        "int8",
                        "uint16",
                        "int16",
                        "uint32",
                        "int32",
                        "uint64",
                        "int64",
                        "bool"
                    ],
                    "title": "Dtype",
                    "type": "string"
                }
            },
            "required": [
                "dtype"
            ],
            "title": "EnsureDtypeKwargs",
            "type": "object"
        },
        "EnvironmentFileDescr": {
            "additionalProperties": false,
            "properties": {
                "source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        }
                    ],
                    "description": "\u2208\ud83d\udce6 Conda environment file.\nAllows to specify custom dependencies, see conda docs:\n- [Exporting an environment file across platforms](https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#exporting-an-environment-file-across-platforms)\n- [Creating an environment file manually](https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#creating-an-environment-file-manually)",
                    "examples": [
                        "environment.yaml"
                    ],
                    "title": "Source"
                },
                "sha256": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "SHA256 checksum of the source file",
                    "title": "Sha256"
                }
            },
            "required": [
                "source"
            ],
            "title": "EnvironmentFileDescr",
            "type": "object"
        },
        "FileDescr": {
            "additionalProperties": false,
            "properties": {
                "source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        }
                    ],
                    "description": "\u2208\ud83d\udce6 file source",
                    "title": "Source"
                },
                "sha256": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "SHA256 checksum of the source file",
                    "title": "Sha256"
                }
            },
            "required": [
                "source"
            ],
            "title": "FileDescr",
            "type": "object"
        },
        "FixedZeroMeanUnitVarianceAlongAxisKwargs": {
            "additionalProperties": false,
            "description": "key word arguments for `FixedZeroMeanUnitVarianceDescr`",
            "properties": {
                "mean": {
                    "description": "The mean value(s) to normalize with.",
                    "items": {
                        "type": "number"
                    },
                    "minItems": 1,
                    "title": "Mean",
                    "type": "array"
                },
                "std": {
                    "description": "The standard deviation value(s) to normalize with.\nSize must match `mean` values.",
                    "items": {
                        "minimum": 1e-06,
                        "type": "number"
                    },
                    "minItems": 1,
                    "title": "Std",
                    "type": "array"
                },
                "axis": {
                    "description": "The axis of the mean/std values to normalize each entry along that dimension\nseparately.",
                    "examples": [
                        "channel",
                        "index"
                    ],
                    "title": "Axis",
                    "type": "string"
                }
            },
            "required": [
                "mean",
                "std",
                "axis"
            ],
            "title": "FixedZeroMeanUnitVarianceAlongAxisKwargs",
            "type": "object"
        },
        "FixedZeroMeanUnitVarianceDescr": {
            "additionalProperties": false,
            "description": "Subtract a given mean and divide by the standard deviation.\n\nNormalize with fixed, precomputed values for\n`FixedZeroMeanUnitVarianceKwargs.mean` and `FixedZeroMeanUnitVarianceKwargs.std`\nUse `FixedZeroMeanUnitVarianceAlongAxisKwargs` for independent scaling along given\naxes.",
            "properties": {
                "id": {
                    "const": "fixed_zero_mean_unit_variance",
                    "default": "fixed_zero_mean_unit_variance",
                    "enum": [
                        "fixed_zero_mean_unit_variance"
                    ],
                    "title": "Id",
                    "type": "string"
                },
                "kwargs": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/FixedZeroMeanUnitVarianceKwargs"
                        },
                        {
                            "$ref": "#/$defs/FixedZeroMeanUnitVarianceAlongAxisKwargs"
                        }
                    ],
                    "title": "Kwargs"
                }
            },
            "required": [
                "kwargs"
            ],
            "title": "FixedZeroMeanUnitVarianceDescr",
            "type": "object"
        },
        "FixedZeroMeanUnitVarianceKwargs": {
            "additionalProperties": false,
            "description": "key word arguments for `FixedZeroMeanUnitVarianceDescr`",
            "properties": {
                "mean": {
                    "description": "The mean value to normalize with.",
                    "title": "Mean",
                    "type": "number"
                },
                "std": {
                    "description": "The standard deviation value to normalize with.",
                    "minimum": 1e-06,
                    "title": "Std",
                    "type": "number"
                }
            },
            "required": [
                "mean",
                "std"
            ],
            "title": "FixedZeroMeanUnitVarianceKwargs",
            "type": "object"
        },
        "ImplicitOutputShape": {
            "additionalProperties": false,
            "description": "Output tensor shape depending on an input tensor shape.\n`shape(output_tensor) = shape(input_tensor) * scale + 2 * offset`",
            "properties": {
                "reference_tensor": {
                    "description": "Name of the reference tensor.",
                    "title": "Reference Tensor",
                    "type": "string"
                },
                "scale": {
                    "description": "output_pix/input_pix for each dimension.\n'null' values indicate new dimensions, whose length is defined by 2*`offset`",
                    "items": {
                        "anyOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "null"
                            }
                        ]
                    },
                    "minItems": 1,
                    "title": "Scale",
                    "type": "array"
                },
                "offset": {
                    "description": "Position of origin wrt to input.",
                    "items": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "multipleOf": 0.5,
                                "type": "number"
                            }
                        ]
                    },
                    "minItems": 1,
                    "title": "Offset",
                    "type": "array"
                }
            },
            "required": [
                "reference_tensor",
                "scale",
                "offset"
            ],
            "title": "ImplicitOutputShape",
            "type": "object"
        },
        "IndexInputAxis": {
            "additionalProperties": false,
            "properties": {
                "size": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0,
                            "type": "integer"
                        },
                        {
                            "$ref": "#/$defs/ParameterizedSize"
                        },
                        {
                            "$ref": "#/$defs/SizeReference"
                        }
                    ],
                    "description": "The size/length of this axis can be specified as\n- fixed integer\n- parameterized series of valid sizes (`ParameterizedSize`)\n- reference to another axis with an optional offset (`SizeReference`)",
                    "examples": [
                        10,
                        {
                            "min": 32,
                            "step": 16
                        },
                        {
                            "axis_id": "a",
                            "offset": 5,
                            "tensor_id": "t"
                        }
                    ],
                    "title": "Size"
                },
                "id": {
                    "default": "index",
                    "title": "Id",
                    "type": "string"
                },
                "description": {
                    "default": "",
                    "maxLength": 128,
                    "title": "Description",
                    "type": "string"
                },
                "type": {
                    "const": "index",
                    "default": "index",
                    "enum": [
                        "index"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "concatenable": {
                    "default": false,
                    "description": "If a model has a `concatenable` input axis, it can be processed blockwise,\nsplitting a longer sample axis into blocks matching its input tensor description.\nOutput axes are concatenable if they have a `SizeReference` to a concatenable\ninput axis.",
                    "title": "Concatenable",
                    "type": "boolean"
                }
            },
            "required": [
                "size"
            ],
            "title": "IndexInputAxis",
            "type": "object"
        },
        "IndexOutputAxis": {
            "additionalProperties": false,
            "properties": {
                "id": {
                    "default": "index",
                    "title": "Id",
                    "type": "string"
                },
                "description": {
                    "default": "",
                    "maxLength": 128,
                    "title": "Description",
                    "type": "string"
                },
                "type": {
                    "const": "index",
                    "default": "index",
                    "enum": [
                        "index"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "size": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0,
                            "type": "integer"
                        },
                        {
                            "$ref": "#/$defs/SizeReference"
                        },
                        {
                            "$ref": "#/$defs/DataDependentSize"
                        }
                    ],
                    "description": "The size/length of this axis can be specified as\n- fixed integer\n- reference to another axis with an optional offset (`SizeReference`)\n- data dependent size using `DataDependentSize` (size is only known after model inference)",
                    "examples": [
                        10,
                        {
                            "axis_id": "a",
                            "offset": 5,
                            "tensor_id": "t"
                        }
                    ],
                    "title": "Size"
                }
            },
            "required": [
                "size"
            ],
            "title": "IndexOutputAxis",
            "type": "object"
        },
        "IntervalOrRatioDataDescr": {
            "additionalProperties": false,
            "properties": {
                "type": {
                    "default": "float32",
                    "enum": [
                        "float32",
                        "float64",
                        "uint8",
                        "int8",
                        "uint16",
                        "int16",
                        "uint32",
                        "int32",
                        "uint64",
                        "int64"
                    ],
                    "examples": [
                        "float32",
                        "float64",
                        "uint8",
                        "uint16"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "range": {
                    "default": [
                        null,
                        null
                    ],
                    "description": "Tuple `(minimum, maximum)` specifying the allowed range of the data in this tensor.\n`None` corresponds to min/max of what can be expressed by `data_type`.",
                    "maxItems": 2,
                    "minItems": 2,
                    "prefixItems": [
                        {
                            "anyOf": [
                                {
                                    "type": "number"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        },
                        {
                            "anyOf": [
                                {
                                    "type": "number"
                                },
                                {
                                    "type": "null"
                                }
                            ]
                        }
                    ],
                    "title": "Range",
                    "type": "array"
                },
                "unit": {
                    "anyOf": [
                        {
                            "const": "arbitrary unit",
                            "enum": [
                                "arbitrary unit"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "default": "arbitrary unit",
                    "title": "Unit"
                },
                "scale": {
                    "default": 1.0,
                    "description": "Scale for data on an interval (or ratio) scale.",
                    "title": "Scale",
                    "type": "number"
                },
                "offset": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Offset for data on a ratio scale.",
                    "title": "Offset"
                }
            },
            "title": "IntervalOrRatioDataDescr",
            "type": "object"
        },
        "Maintainer": {
            "additionalProperties": false,
            "properties": {
                "affiliation": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Affiliation",
                    "title": "Affiliation"
                },
                "email": {
                    "anyOf": [
                        {
                            "format": "email",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Email",
                    "title": "Email"
                },
                "orcid": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "An [ORCID iD](https://support.orcid.org/hc/en-us/sections/360001495313-What-is-ORCID\n) in hyphenated groups of 4 digits, (and [valid](\nhttps://support.orcid.org/hc/en-us/articles/360006897674-Structure-of-the-ORCID-Identifier\n) as per ISO 7064 11,2.)",
                    "examples": [
                        "0000-0001-2345-6789"
                    ],
                    "title": "Orcid"
                },
                "name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "title": "Name"
                },
                "github_user": {
                    "title": "Github User",
                    "type": "string"
                }
            },
            "required": [
                "github_user"
            ],
            "title": "Maintainer",
            "type": "object"
        },
        "NominalOrOrdinalDataDescr": {
            "additionalProperties": false,
            "properties": {
                "values": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "integer"
                            },
                            "minItems": 1,
                            "type": "array"
                        },
                        {
                            "items": {
                                "type": "number"
                            },
                            "minItems": 1,
                            "type": "array"
                        },
                        {
                            "items": {
                                "type": "boolean"
                            },
                            "minItems": 1,
                            "type": "array"
                        },
                        {
                            "items": {
                                "type": "string"
                            },
                            "minItems": 1,
                            "type": "array"
                        }
                    ],
                    "description": "A fixed set of nominal or an ascending sequence of ordinal values.\nIn this case `data_type` is required to be an unsigend integer type, e.g. 'uint8'.\nString `values` are interpreted as labels for tensor values 0, ..., N.\nNote: as YAML 1.2 does not natively support a \"set\" datatype,\nnominal values should be given as a sequence (aka list/array) as well.",
                    "title": "Values"
                },
                "type": {
                    "default": "uint8",
                    "enum": [
                        "float32",
                        "float64",
                        "uint8",
                        "int8",
                        "uint16",
                        "int16",
                        "uint32",
                        "int32",
                        "uint64",
                        "int64",
                        "bool"
                    ],
                    "examples": [
                        "float32",
                        "uint8",
                        "uint16",
                        "int64",
                        "bool"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "unit": {
                    "anyOf": [
                        {
                            "const": "arbitrary unit",
                            "enum": [
                                "arbitrary unit"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "title": "Unit"
                }
            },
            "required": [
                "values"
            ],
            "title": "NominalOrOrdinalDataDescr",
            "type": "object"
        },
        "ParameterizedInputShape": {
            "additionalProperties": false,
            "description": "A sequence of valid shapes given by `shape_k = min + k * step for k in {0, 1, ...}`.",
            "properties": {
                "min": {
                    "description": "The minimum input shape",
                    "items": {
                        "type": "integer"
                    },
                    "minItems": 1,
                    "title": "Min",
                    "type": "array"
                },
                "step": {
                    "description": "The minimum shape change",
                    "items": {
                        "type": "integer"
                    },
                    "minItems": 1,
                    "title": "Step",
                    "type": "array"
                }
            },
            "required": [
                "min",
                "step"
            ],
            "title": "ParameterizedInputShape",
            "type": "object"
        },
        "ParameterizedSize": {
            "additionalProperties": false,
            "description": "Describes a range of valid tensor axis sizes as `size = min + n*step`.",
            "properties": {
                "min": {
                    "exclusiveMinimum": 0,
                    "title": "Min",
                    "type": "integer"
                },
                "step": {
                    "exclusiveMinimum": 0,
                    "title": "Step",
                    "type": "integer"
                }
            },
            "required": [
                "min",
                "step"
            ],
            "title": "ParameterizedSize",
            "type": "object"
        },
        "RelativeFilePath": {
            "description": "A path relative to the `rdf.yaml` file (also if the RDF source is a URL).",
            "format": "path",
            "title": "RelativeFilePath",
            "type": "string"
        },
        "RunMode": {
            "additionalProperties": false,
            "properties": {
                "name": {
                    "anyOf": [
                        {
                            "const": "deepimagej",
                            "enum": [
                                "deepimagej"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "Run mode name",
                    "title": "Name"
                },
                "kwargs": {
                    "description": "Run mode specific key word arguments",
                    "title": "Kwargs",
                    "type": "object"
                }
            },
            "required": [
                "name"
            ],
            "title": "RunMode",
            "type": "object"
        },
        "ScaleLinearAlongAxisKwargs": {
            "additionalProperties": false,
            "description": "key word arguments for `ScaleLinearDescr`",
            "properties": {
                "axis": {
                    "description": "The axis of of gains/offsets values.",
                    "examples": [
                        "channel"
                    ],
                    "title": "Axis",
                    "type": "string"
                },
                "gain": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "items": {
                                "type": "number"
                            },
                            "minItems": 1,
                            "type": "array"
                        }
                    ],
                    "default": 1.0,
                    "description": "multiplicative factor",
                    "title": "Gain"
                },
                "offset": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "items": {
                                "type": "number"
                            },
                            "minItems": 1,
                            "type": "array"
                        }
                    ],
                    "default": 0.0,
                    "description": "additive term",
                    "title": "Offset"
                }
            },
            "required": [
                "axis"
            ],
            "title": "ScaleLinearAlongAxisKwargs",
            "type": "object"
        },
        "SizeReference": {
            "additionalProperties": false,
            "description": "A tensor axis size (extent in pixels/frames) defined in relation to a reference axis.\n\n`axis.size = reference.size * reference.scale / axis.scale + offset`\n\nnote:\n1. The axis and the referenced axis need to have the same unit (or no unit).\n2. Batch axes may not be referenced.\n3. Fractions are rounded down.\n4. If the reference axis is `concatenable` the referencing axis is assumed to be\n    `concatenable` as well with the same block order.\n\nexample:\nAn unisotropic input image of w*h=100*49 pixels depicts a phsical space of 200*196mm\u00b2.\nLet's assume that we want to express the image height h in relation to its width w\ninstead of only accepting input images of exactly 100*49 pixels\n(for example to express a range of valid image shapes by parametrizing w, see `ParameterizedSize`).\n\n>>> w = SpaceInputAxis(id=AxisId(\"w\"), size=100, unit=\"millimeter\", scale=2)\n>>> h = SpaceInputAxis(\n...     id=AxisId(\"h\"),\n...     size=SizeReference(tensor_id=TensorId(\"input\"), axis_id=AxisId(\"w\"), offset=-1),\n...     unit=\"millimeter\",\n...     scale=4,\n... )\n>>> print(h.size.compute(h, w))\n49\n\n-> h = w * w.scale / h.scale + offset = 100 * 2mm / 4mm - 1 = 49",
            "properties": {
                "tensor_id": {
                    "description": "tensor id of the reference axis",
                    "title": "Tensor Id",
                    "type": "string"
                },
                "axis_id": {
                    "description": "axis id of the reference axis",
                    "title": "Axis Id",
                    "type": "string"
                },
                "offset": {
                    "default": 0,
                    "title": "Offset",
                    "type": "integer"
                }
            },
            "required": [
                "tensor_id",
                "axis_id"
            ],
            "title": "SizeReference",
            "type": "object"
        },
        "SpaceInputAxis": {
            "additionalProperties": false,
            "properties": {
                "size": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0,
                            "type": "integer"
                        },
                        {
                            "$ref": "#/$defs/ParameterizedSize"
                        },
                        {
                            "$ref": "#/$defs/SizeReference"
                        }
                    ],
                    "description": "The size/length of this axis can be specified as\n- fixed integer\n- parameterized series of valid sizes (`ParameterizedSize`)\n- reference to another axis with an optional offset (`SizeReference`)",
                    "examples": [
                        10,
                        {
                            "min": 32,
                            "step": 16
                        },
                        {
                            "axis_id": "a",
                            "offset": 5,
                            "tensor_id": "t"
                        }
                    ],
                    "title": "Size"
                },
                "id": {
                    "default": "x",
                    "examples": [
                        "x",
                        "y",
                        "z"
                    ],
                    "title": "Id",
                    "type": "string"
                },
                "description": {
                    "default": "",
                    "maxLength": 128,
                    "title": "Description",
                    "type": "string"
                },
                "type": {
                    "const": "space",
                    "default": "space",
                    "enum": [
                        "space"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "unit": {
                    "anyOf": [
                        {
                            "enum": [
                                "attometer",
                                "angstrom",
                                "centimeter",
                                "decimeter",
                                "exameter",
                                "femtometer",
                                "foot",
                                "gigameter",
                                "hectometer",
                                "inch",
                                "kilometer",
                                "megameter",
                                "meter",
                                "micrometer",
                                "mile",
                                "millimeter",
                                "nanometer",
                                "parsec",
                                "petameter",
                                "picometer",
                                "terameter",
                                "yard",
                                "yoctometer",
                                "yottameter",
                                "zeptometer",
                                "zettameter"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "title": "Unit"
                },
                "scale": {
                    "default": 1.0,
                    "exclusiveMinimum": 0.0,
                    "title": "Scale",
                    "type": "number"
                },
                "concatenable": {
                    "default": false,
                    "description": "If a model has a `concatenable` input axis, it can be processed blockwise,\nsplitting a longer sample axis into blocks matching its input tensor description.\nOutput axes are concatenable if they have a `SizeReference` to a concatenable\ninput axis.",
                    "title": "Concatenable",
                    "type": "boolean"
                }
            },
            "required": [
                "size"
            ],
            "title": "SpaceInputAxis",
            "type": "object"
        },
        "SpaceOutputAxis": {
            "additionalProperties": false,
            "properties": {
                "size": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0,
                            "type": "integer"
                        },
                        {
                            "$ref": "#/$defs/SizeReference"
                        }
                    ],
                    "description": "The size/length of this axis can be specified as\n- fixed integer\n- reference to another axis with an optional offset (see `SizeReference`)",
                    "examples": [
                        10,
                        {
                            "axis_id": "a",
                            "offset": 5,
                            "tensor_id": "t"
                        }
                    ],
                    "title": "Size"
                },
                "id": {
                    "default": "x",
                    "examples": [
                        "x",
                        "y",
                        "z"
                    ],
                    "title": "Id",
                    "type": "string"
                },
                "description": {
                    "default": "",
                    "maxLength": 128,
                    "title": "Description",
                    "type": "string"
                },
                "type": {
                    "const": "space",
                    "default": "space",
                    "enum": [
                        "space"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "unit": {
                    "anyOf": [
                        {
                            "enum": [
                                "attometer",
                                "angstrom",
                                "centimeter",
                                "decimeter",
                                "exameter",
                                "femtometer",
                                "foot",
                                "gigameter",
                                "hectometer",
                                "inch",
                                "kilometer",
                                "megameter",
                                "meter",
                                "micrometer",
                                "mile",
                                "millimeter",
                                "nanometer",
                                "parsec",
                                "petameter",
                                "picometer",
                                "terameter",
                                "yard",
                                "yoctometer",
                                "yottameter",
                                "zeptometer",
                                "zettameter"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "title": "Unit"
                },
                "scale": {
                    "default": 1.0,
                    "exclusiveMinimum": 0.0,
                    "title": "Scale",
                    "type": "number"
                }
            },
            "required": [
                "size"
            ],
            "title": "SpaceOutputAxis",
            "type": "object"
        },
        "SpaceOutputAxisWithHalo": {
            "additionalProperties": false,
            "properties": {
                "halo": {
                    "description": "The halo should be cropped from the output tensor to avoid boundary effects.\nIt is to be cropped from both sides, i.e. `size_after_crop = size - 2 * halo`.\nTo document a halo that is already cropped by the model use `size.offset` instead.",
                    "minimum": 1,
                    "title": "Halo",
                    "type": "integer"
                },
                "size": {
                    "$ref": "#/$defs/SizeReference",
                    "description": "reference to another axis with an optional offset (see `SizeReference`)",
                    "examples": [
                        10,
                        {
                            "axis_id": "a",
                            "offset": 5,
                            "tensor_id": "t"
                        }
                    ]
                },
                "id": {
                    "default": "x",
                    "examples": [
                        "x",
                        "y",
                        "z"
                    ],
                    "title": "Id",
                    "type": "string"
                },
                "description": {
                    "default": "",
                    "maxLength": 128,
                    "title": "Description",
                    "type": "string"
                },
                "type": {
                    "const": "space",
                    "default": "space",
                    "enum": [
                        "space"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "unit": {
                    "anyOf": [
                        {
                            "enum": [
                                "attometer",
                                "angstrom",
                                "centimeter",
                                "decimeter",
                                "exameter",
                                "femtometer",
                                "foot",
                                "gigameter",
                                "hectometer",
                                "inch",
                                "kilometer",
                                "megameter",
                                "meter",
                                "micrometer",
                                "mile",
                                "millimeter",
                                "nanometer",
                                "parsec",
                                "petameter",
                                "picometer",
                                "terameter",
                                "yard",
                                "yoctometer",
                                "yottameter",
                                "zeptometer",
                                "zettameter"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "title": "Unit"
                },
                "scale": {
                    "default": 1.0,
                    "exclusiveMinimum": 0.0,
                    "title": "Scale",
                    "type": "number"
                }
            },
            "required": [
                "halo",
                "size"
            ],
            "title": "SpaceOutputAxisWithHalo",
            "type": "object"
        },
        "TimeInputAxis": {
            "additionalProperties": false,
            "properties": {
                "size": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0,
                            "type": "integer"
                        },
                        {
                            "$ref": "#/$defs/ParameterizedSize"
                        },
                        {
                            "$ref": "#/$defs/SizeReference"
                        }
                    ],
                    "description": "The size/length of this axis can be specified as\n- fixed integer\n- parameterized series of valid sizes (`ParameterizedSize`)\n- reference to another axis with an optional offset (`SizeReference`)",
                    "examples": [
                        10,
                        {
                            "min": 32,
                            "step": 16
                        },
                        {
                            "axis_id": "a",
                            "offset": 5,
                            "tensor_id": "t"
                        }
                    ],
                    "title": "Size"
                },
                "id": {
                    "default": "time",
                    "title": "Id",
                    "type": "string"
                },
                "description": {
                    "default": "",
                    "maxLength": 128,
                    "title": "Description",
                    "type": "string"
                },
                "type": {
                    "const": "time",
                    "default": "time",
                    "enum": [
                        "time"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "unit": {
                    "anyOf": [
                        {
                            "enum": [
                                "attosecond",
                                "centisecond",
                                "day",
                                "decisecond",
                                "exasecond",
                                "femtosecond",
                                "gigasecond",
                                "hectosecond",
                                "hour",
                                "kilosecond",
                                "megasecond",
                                "microsecond",
                                "millisecond",
                                "minute",
                                "nanosecond",
                                "petasecond",
                                "picosecond",
                                "second",
                                "terasecond",
                                "yoctosecond",
                                "yottasecond",
                                "zeptosecond",
                                "zettasecond"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "title": "Unit"
                },
                "scale": {
                    "default": 1.0,
                    "exclusiveMinimum": 0.0,
                    "title": "Scale",
                    "type": "number"
                },
                "concatenable": {
                    "default": false,
                    "description": "If a model has a `concatenable` input axis, it can be processed blockwise,\nsplitting a longer sample axis into blocks matching its input tensor description.\nOutput axes are concatenable if they have a `SizeReference` to a concatenable\ninput axis.",
                    "title": "Concatenable",
                    "type": "boolean"
                }
            },
            "required": [
                "size"
            ],
            "title": "TimeInputAxis",
            "type": "object"
        },
        "TimeOutputAxis": {
            "additionalProperties": false,
            "properties": {
                "size": {
                    "anyOf": [
                        {
                            "exclusiveMinimum": 0,
                            "type": "integer"
                        },
                        {
                            "$ref": "#/$defs/SizeReference"
                        }
                    ],
                    "description": "The size/length of this axis can be specified as\n- fixed integer\n- reference to another axis with an optional offset (see `SizeReference`)",
                    "examples": [
                        10,
                        {
                            "axis_id": "a",
                            "offset": 5,
                            "tensor_id": "t"
                        }
                    ],
                    "title": "Size"
                },
                "id": {
                    "default": "time",
                    "title": "Id",
                    "type": "string"
                },
                "description": {
                    "default": "",
                    "maxLength": 128,
                    "title": "Description",
                    "type": "string"
                },
                "type": {
                    "const": "time",
                    "default": "time",
                    "enum": [
                        "time"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "unit": {
                    "anyOf": [
                        {
                            "enum": [
                                "attosecond",
                                "centisecond",
                                "day",
                                "decisecond",
                                "exasecond",
                                "femtosecond",
                                "gigasecond",
                                "hectosecond",
                                "hour",
                                "kilosecond",
                                "megasecond",
                                "microsecond",
                                "millisecond",
                                "minute",
                                "nanosecond",
                                "petasecond",
                                "picosecond",
                                "second",
                                "terasecond",
                                "yoctosecond",
                                "yottasecond",
                                "zeptosecond",
                                "zettasecond"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "title": "Unit"
                },
                "scale": {
                    "default": 1.0,
                    "exclusiveMinimum": 0.0,
                    "title": "Scale",
                    "type": "number"
                }
            },
            "required": [
                "size"
            ],
            "title": "TimeOutputAxis",
            "type": "object"
        },
        "TimeOutputAxisWithHalo": {
            "additionalProperties": false,
            "properties": {
                "halo": {
                    "description": "The halo should be cropped from the output tensor to avoid boundary effects.\nIt is to be cropped from both sides, i.e. `size_after_crop = size - 2 * halo`.\nTo document a halo that is already cropped by the model use `size.offset` instead.",
                    "minimum": 1,
                    "title": "Halo",
                    "type": "integer"
                },
                "size": {
                    "$ref": "#/$defs/SizeReference",
                    "description": "reference to another axis with an optional offset (see `SizeReference`)",
                    "examples": [
                        10,
                        {
                            "axis_id": "a",
                            "offset": 5,
                            "tensor_id": "t"
                        }
                    ]
                },
                "id": {
                    "default": "time",
                    "title": "Id",
                    "type": "string"
                },
                "description": {
                    "default": "",
                    "maxLength": 128,
                    "title": "Description",
                    "type": "string"
                },
                "type": {
                    "const": "time",
                    "default": "time",
                    "enum": [
                        "time"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "unit": {
                    "anyOf": [
                        {
                            "enum": [
                                "attosecond",
                                "centisecond",
                                "day",
                                "decisecond",
                                "exasecond",
                                "femtosecond",
                                "gigasecond",
                                "hectosecond",
                                "hour",
                                "kilosecond",
                                "megasecond",
                                "microsecond",
                                "millisecond",
                                "minute",
                                "nanosecond",
                                "petasecond",
                                "picosecond",
                                "second",
                                "terasecond",
                                "yoctosecond",
                                "yottasecond",
                                "zeptosecond",
                                "zettasecond"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "title": "Unit"
                },
                "scale": {
                    "default": 1.0,
                    "exclusiveMinimum": 0.0,
                    "title": "Scale",
                    "type": "number"
                }
            },
            "required": [
                "halo",
                "size"
            ],
            "title": "TimeOutputAxisWithHalo",
            "type": "object"
        },
        "Uploader": {
            "additionalProperties": false,
            "properties": {
                "email": {
                    "description": "Email",
                    "format": "email",
                    "title": "Email",
                    "type": "string"
                },
                "name": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "name",
                    "title": "Name"
                }
            },
            "required": [
                "email"
            ],
            "title": "Uploader",
            "type": "object"
        },
        "Version": {
            "anyOf": [
                {
                    "type": "string"
                },
                {
                    "type": "integer"
                },
                {
                    "type": "number"
                }
            ],
            "description": "wraps a packaging.version.Version instance for validation in pydantic models",
            "title": "Version"
        },
        "YamlValue": {
            "anyOf": [
                {
                    "type": "boolean"
                },
                {
                    "format": "date",
                    "type": "string"
                },
                {
                    "format": "date-time",
                    "type": "string"
                },
                {
                    "type": "integer"
                },
                {
                    "type": "number"
                },
                {
                    "type": "string"
                },
                {
                    "items": {
                        "$ref": "#/$defs/YamlValue"
                    },
                    "type": "array"
                },
                {
                    "additionalProperties": {
                        "$ref": "#/$defs/YamlValue"
                    },
                    "type": "object"
                },
                {
                    "type": "null"
                }
            ]
        },
        "bioimageio__spec__application__v0_2__ApplicationDescr": {
            "additionalProperties": false,
            "description": "Bioimage.io description of an application.",
            "properties": {
                "name": {
                    "description": "A human-friendly name of the resource description",
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "description": {
                    "title": "Description",
                    "type": "string"
                },
                "covers": {
                    "description": "Cover images. Please use an image smaller than 500KB and an aspect ratio width to height of 2:1.\nThe supported image formats are: ('.gif', '.jpeg', '.jpg', '.png', '.svg', '.tif', '.tiff')",
                    "examples": [
                        "cover.png"
                    ],
                    "items": {
                        "anyOf": [
                            {
                                "format": "file-path",
                                "type": "string"
                            },
                            {
                                "$ref": "#/$defs/RelativeFilePath"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "title": "Covers",
                    "type": "array"
                },
                "id_emoji": {
                    "anyOf": [
                        {
                            "maxLength": 1,
                            "minLength": 1,
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "UTF-8 emoji for display alongside the `id`.",
                    "title": "Id Emoji"
                },
                "authors": {
                    "description": "The authors are the creators of the RDF and the primary points of contact.",
                    "items": {
                        "$ref": "#/$defs/Author"
                    },
                    "title": "Authors",
                    "type": "array"
                },
                "attachments": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AttachmentsDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "file and other attachments"
                },
                "cite": {
                    "description": "citations",
                    "items": {
                        "$ref": "#/$defs/CiteEntry"
                    },
                    "title": "Cite",
                    "type": "array"
                },
                "config": {
                    "additionalProperties": {
                        "$ref": "#/$defs/YamlValue"
                    },
                    "description": "A field for custom configuration that can contain any keys not present in the RDF spec.\nThis means you should not store, for example, a github repo URL in `config` since we already have the\n`git_repo` field defined in the spec.\nKeys in `config` may be very specific to a tool or consumer software. To avoid conflicting definitions,\nit is recommended to wrap added configuration into a sub-field named with the specific domain or tool name,\nfor example:\n```yaml\nconfig:\n    bioimageio:  # here is the domain name\n        my_custom_key: 3837283\n        another_key:\n            nested: value\n    imagej:       # config specific to ImageJ\n        macro_dir: path/to/macro/file\n```\nIf possible, please use [`snake_case`](https://en.wikipedia.org/wiki/Snake_case) for keys in `config`.\nYou may want to list linked files additionally under `attachments` to include them when packaging a resource\n(packaging a resource means downloading/copying important linked files and creating a ZIP archive that contains\nan altered rdf.yaml file with local references to the downloaded files)",
                    "examples": [
                        {
                            "bioimageio": {
                                "another_key": {
                                    "nested": "value"
                                },
                                "my_custom_key": 3837283
                            },
                            "imagej": {
                                "macro_dir": "path/to/macro/file"
                            }
                        }
                    ],
                    "title": "Config",
                    "type": "object"
                },
                "download_url": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URL to download the resource from (deprecated)",
                    "title": "Download Url"
                },
                "git_repo": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A URL to the Git repository where the resource is being developed.",
                    "examples": [
                        "https://github.com/bioimage-io/spec-bioimage-io/tree/main/example_descriptions/models/unet2d_nuclei_broad"
                    ],
                    "title": "Git Repo"
                },
                "icon": {
                    "anyOf": [
                        {
                            "maxLength": 2,
                            "minLength": 1,
                            "type": "string"
                        },
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "An icon for illustration",
                    "title": "Icon"
                },
                "links": {
                    "description": "IDs of other bioimage.io resources",
                    "examples": [
                        [
                            "ilastik/ilastik",
                            "deepimagej/deepimagej",
                            "zero/notebook_u-net_3d_zerocostdl4mic"
                        ]
                    ],
                    "items": {
                        "type": "string"
                    },
                    "title": "Links",
                    "type": "array"
                },
                "uploader": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Uploader"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The person who uploaded the model (e.g. to bioimage.io)"
                },
                "maintainers": {
                    "description": "Maintainers of this resource.\nIf not specified `authors` are maintainers and at least some of them should specify their `github_user` name",
                    "items": {
                        "$ref": "#/$defs/Maintainer"
                    },
                    "title": "Maintainers",
                    "type": "array"
                },
                "rdf_source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Resource description file (RDF) source; used to keep track of where an rdf.yaml was loaded from.\nDo not set this field in a YAML file.",
                    "title": "Rdf Source"
                },
                "tags": {
                    "description": "Associated tags",
                    "examples": [
                        [
                            "unet2d",
                            "pytorch",
                            "nucleus",
                            "segmentation",
                            "dsb2018"
                        ]
                    ],
                    "items": {
                        "type": "string"
                    },
                    "title": "Tags",
                    "type": "array"
                },
                "version": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Version"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The version of the resource following SemVer 2.0."
                },
                "version_number": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "version number (n-th published version, not the semantic version)",
                    "title": "Version Number"
                },
                "format_version": {
                    "const": "0.2.4",
                    "default": "0.2.4",
                    "description": "The format version of this resource specification\n(not the `version` of the resource description)\nWhen creating a new resource always use the latest micro/patch version described here.\nThe `format_version` is important for any consumer software to understand how to parse the fields.",
                    "enum": [
                        "0.2.4"
                    ],
                    "title": "Format Version",
                    "type": "string"
                },
                "badges": {
                    "description": "badges associated with this resource",
                    "items": {
                        "$ref": "#/$defs/BadgeDescr"
                    },
                    "title": "Badges",
                    "type": "array"
                },
                "documentation": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "\u2208\ud83d\udce6 URL or relative path to a markdown file with additional documentation.\nThe recommended documentation file name is `README.md`. An `.md` suffix is mandatory.",
                    "examples": [
                        "https://raw.githubusercontent.com/bioimage-io/spec-bioimage-io/main/example_descriptions/models/unet2d_nuclei_broad/README.md",
                        "README.md"
                    ],
                    "title": "Documentation"
                },
                "license": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A [SPDX license identifier](https://spdx.org/licenses/).\nWe do not support custom license beyond the SPDX license list, if you need that please\n[open a GitHub issue](https://github.com/bioimage-io/spec-bioimage-io/issues/new/choose\n) to discuss your intentions with the community.",
                    "examples": [
                        "CC0-1.0",
                        "MIT",
                        "BSD-2-Clause"
                    ],
                    "title": "License"
                },
                "type": {
                    "const": "application",
                    "default": "application",
                    "enum": [
                        "application"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "bioimage.io-wide unique resource identifier\nassigned by bioimage.io; version **un**specific.",
                    "title": "Id"
                },
                "source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URL or path to the source of the application",
                    "title": "Source"
                }
            },
            "required": [
                "name",
                "description"
            ],
            "title": "bioimage.io application specification",
            "type": "object"
        },
        "bioimageio__spec__application__v0_3__ApplicationDescr": {
            "additionalProperties": false,
            "description": "Bioimage.io description of an application.",
            "properties": {
                "name": {
                    "description": "A human-friendly name of the resource description.\nMay only contains letters, digits, underscore, minus, parentheses and spaces.",
                    "maxLength": 128,
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "description": {
                    "description": "A string containing a brief description.",
                    "maxLength": 1024,
                    "title": "Description",
                    "type": "string"
                },
                "covers": {
                    "description": "Cover images. Please use an image smaller than 500KB and an aspect ratio width to height of 2:1 or 1:1.\nThe supported image formats are: ('.gif', '.jpeg', '.jpg', '.png', '.svg')",
                    "examples": [],
                    "items": {
                        "anyOf": [
                            {
                                "format": "file-path",
                                "type": "string"
                            },
                            {
                                "$ref": "#/$defs/RelativeFilePath"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "title": "Covers",
                    "type": "array"
                },
                "id_emoji": {
                    "anyOf": [
                        {
                            "maxLength": 2,
                            "minLength": 1,
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "UTF-8 emoji for display alongside the `id`.",
                    "title": "Id Emoji"
                },
                "authors": {
                    "description": "The authors are the creators of this resource description and the primary points of contact.",
                    "items": {
                        "$ref": "#/$defs/Author"
                    },
                    "minItems": 1,
                    "title": "Authors",
                    "type": "array"
                },
                "attachments": {
                    "description": "file attachments",
                    "items": {
                        "$ref": "#/$defs/FileDescr"
                    },
                    "title": "Attachments",
                    "type": "array"
                },
                "cite": {
                    "description": "citations",
                    "items": {
                        "$ref": "#/$defs/CiteEntry"
                    },
                    "minItems": 1,
                    "title": "Cite",
                    "type": "array"
                },
                "license": {
                    "description": "A [SPDX license identifier](https://spdx.org/licenses/).\nWe do not support custom license beyond the SPDX license list, if you need that please\n[open a GitHub issue](https://github.com/bioimage-io/spec-bioimage-io/issues/new/choose)\nto discuss your intentions with the community.",
                    "examples": [
                        "CC0-1.0",
                        "MIT",
                        "BSD-2-Clause"
                    ],
                    "title": "License",
                    "type": "string"
                },
                "config": {
                    "additionalProperties": {
                        "$ref": "#/$defs/YamlValue"
                    },
                    "description": "A field for custom configuration that can contain any keys not present in the RDF spec.\nThis means you should not store, for example, a GitHub repo URL in `config` since there is a `git_repo` field.\nKeys in `config` may be very specific to a tool or consumer software. To avoid conflicting definitions,\nit is recommended to wrap added configuration into a sub-field named with the specific domain or tool name,\nfor example:\n```yaml\nconfig:\n    bioimageio:  # here is the domain name\n        my_custom_key: 3837283\n        another_key:\n            nested: value\n    imagej:       # config specific to ImageJ\n        macro_dir: path/to/macro/file\n```\nIf possible, please use [`snake_case`](https://en.wikipedia.org/wiki/Snake_case) for keys in `config`.\nYou may want to list linked files additionally under `attachments` to include them when packaging a resource.\n(Packaging a resource means downloading/copying important linked files and creating a ZIP archive that contains\nan altered rdf.yaml file with local references to the downloaded files.)",
                    "examples": [
                        {
                            "bioimageio": {
                                "another_key": {
                                    "nested": "value"
                                },
                                "my_custom_key": 3837283
                            },
                            "imagej": {
                                "macro_dir": "path/to/macro/file"
                            }
                        }
                    ],
                    "title": "Config",
                    "type": "object"
                },
                "git_repo": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A URL to the Git repository where the resource is being developed.",
                    "examples": [
                        "https://github.com/bioimage-io/spec-bioimage-io/tree/main/example_descriptions/models/unet2d_nuclei_broad"
                    ],
                    "title": "Git Repo"
                },
                "icon": {
                    "anyOf": [
                        {
                            "maxLength": 2,
                            "minLength": 1,
                            "type": "string"
                        },
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "An icon for illustration, e.g. on bioimage.io",
                    "title": "Icon"
                },
                "links": {
                    "description": "IDs of other bioimage.io resources",
                    "examples": [
                        [
                            "ilastik/ilastik",
                            "deepimagej/deepimagej",
                            "zero/notebook_u-net_3d_zerocostdl4mic"
                        ]
                    ],
                    "items": {
                        "type": "string"
                    },
                    "title": "Links",
                    "type": "array"
                },
                "uploader": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Uploader"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The person who uploaded the model (e.g. to bioimage.io)"
                },
                "maintainers": {
                    "description": "Maintainers of this resource.\nIf not specified, `authors` are maintainers and at least some of them has to specify their `github_user` name",
                    "items": {
                        "$ref": "#/$defs/Maintainer"
                    },
                    "title": "Maintainers",
                    "type": "array"
                },
                "tags": {
                    "description": "Associated tags",
                    "examples": [
                        [
                            "unet2d",
                            "pytorch",
                            "nucleus",
                            "segmentation",
                            "dsb2018"
                        ]
                    ],
                    "items": {
                        "type": "string"
                    },
                    "title": "Tags",
                    "type": "array"
                },
                "version": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Version"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The version of the resource following SemVer 2.0."
                },
                "format_version": {
                    "const": "0.3.0",
                    "default": "0.3.0",
                    "description": "The **format** version of this resource specification",
                    "enum": [
                        "0.3.0"
                    ],
                    "title": "Format Version",
                    "type": "string"
                },
                "documentation": {
                    "anyOf": [
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "\u2208\ud83d\udce6 URL or relative path to a markdown file encoded in UTF-8 with additional documentation.\nThe recommended documentation file name is `README.md`. An `.md` suffix is mandatory.",
                    "examples": [
                        "https://raw.githubusercontent.com/bioimage-io/spec-bioimage-io/main/example_descriptions/models/unet2d_nuclei_broad/README.md",
                        "README.md"
                    ],
                    "title": "Documentation"
                },
                "badges": {
                    "description": "badges associated with this resource",
                    "items": {
                        "$ref": "#/$defs/BadgeDescr"
                    },
                    "title": "Badges",
                    "type": "array"
                },
                "type": {
                    "const": "application",
                    "default": "application",
                    "enum": [
                        "application"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "bioimage.io-wide unique resource identifier\nassigned by bioimage.io; version **un**specific.",
                    "title": "Id"
                },
                "parent": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The description from which this one is derived",
                    "title": "Parent"
                },
                "source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URL or path to the source of the application",
                    "title": "Source"
                }
            },
            "required": [
                "name",
                "description",
                "authors",
                "cite",
                "license"
            ],
            "title": "bioimage.io application specification",
            "type": "object"
        },
        "bioimageio__spec__dataset__v0_2__DatasetDescr": {
            "additionalProperties": false,
            "description": "A bioimage.io dataset resource description file (dataset RDF) describes a dataset relevant to bioimage\nprocessing.",
            "properties": {
                "name": {
                    "description": "A human-friendly name of the resource description",
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "description": {
                    "title": "Description",
                    "type": "string"
                },
                "covers": {
                    "description": "Cover images. Please use an image smaller than 500KB and an aspect ratio width to height of 2:1.\nThe supported image formats are: ('.gif', '.jpeg', '.jpg', '.png', '.svg', '.tif', '.tiff')",
                    "examples": [
                        "cover.png"
                    ],
                    "items": {
                        "anyOf": [
                            {
                                "format": "file-path",
                                "type": "string"
                            },
                            {
                                "$ref": "#/$defs/RelativeFilePath"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "title": "Covers",
                    "type": "array"
                },
                "id_emoji": {
                    "anyOf": [
                        {
                            "maxLength": 1,
                            "minLength": 1,
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "UTF-8 emoji for display alongside the `id`.",
                    "title": "Id Emoji"
                },
                "authors": {
                    "description": "The authors are the creators of the RDF and the primary points of contact.",
                    "items": {
                        "$ref": "#/$defs/Author"
                    },
                    "title": "Authors",
                    "type": "array"
                },
                "attachments": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AttachmentsDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "file and other attachments"
                },
                "cite": {
                    "description": "citations",
                    "items": {
                        "$ref": "#/$defs/CiteEntry"
                    },
                    "title": "Cite",
                    "type": "array"
                },
                "config": {
                    "additionalProperties": {
                        "$ref": "#/$defs/YamlValue"
                    },
                    "description": "A field for custom configuration that can contain any keys not present in the RDF spec.\nThis means you should not store, for example, a github repo URL in `config` since we already have the\n`git_repo` field defined in the spec.\nKeys in `config` may be very specific to a tool or consumer software. To avoid conflicting definitions,\nit is recommended to wrap added configuration into a sub-field named with the specific domain or tool name,\nfor example:\n```yaml\nconfig:\n    bioimageio:  # here is the domain name\n        my_custom_key: 3837283\n        another_key:\n            nested: value\n    imagej:       # config specific to ImageJ\n        macro_dir: path/to/macro/file\n```\nIf possible, please use [`snake_case`](https://en.wikipedia.org/wiki/Snake_case) for keys in `config`.\nYou may want to list linked files additionally under `attachments` to include them when packaging a resource\n(packaging a resource means downloading/copying important linked files and creating a ZIP archive that contains\nan altered rdf.yaml file with local references to the downloaded files)",
                    "examples": [
                        {
                            "bioimageio": {
                                "another_key": {
                                    "nested": "value"
                                },
                                "my_custom_key": 3837283
                            },
                            "imagej": {
                                "macro_dir": "path/to/macro/file"
                            }
                        }
                    ],
                    "title": "Config",
                    "type": "object"
                },
                "download_url": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URL to download the resource from (deprecated)",
                    "title": "Download Url"
                },
                "git_repo": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A URL to the Git repository where the resource is being developed.",
                    "examples": [
                        "https://github.com/bioimage-io/spec-bioimage-io/tree/main/example_descriptions/models/unet2d_nuclei_broad"
                    ],
                    "title": "Git Repo"
                },
                "icon": {
                    "anyOf": [
                        {
                            "maxLength": 2,
                            "minLength": 1,
                            "type": "string"
                        },
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "An icon for illustration",
                    "title": "Icon"
                },
                "links": {
                    "description": "IDs of other bioimage.io resources",
                    "examples": [
                        [
                            "ilastik/ilastik",
                            "deepimagej/deepimagej",
                            "zero/notebook_u-net_3d_zerocostdl4mic"
                        ]
                    ],
                    "items": {
                        "type": "string"
                    },
                    "title": "Links",
                    "type": "array"
                },
                "uploader": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Uploader"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The person who uploaded the model (e.g. to bioimage.io)"
                },
                "maintainers": {
                    "description": "Maintainers of this resource.\nIf not specified `authors` are maintainers and at least some of them should specify their `github_user` name",
                    "items": {
                        "$ref": "#/$defs/Maintainer"
                    },
                    "title": "Maintainers",
                    "type": "array"
                },
                "rdf_source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Resource description file (RDF) source; used to keep track of where an rdf.yaml was loaded from.\nDo not set this field in a YAML file.",
                    "title": "Rdf Source"
                },
                "tags": {
                    "description": "Associated tags",
                    "examples": [
                        [
                            "unet2d",
                            "pytorch",
                            "nucleus",
                            "segmentation",
                            "dsb2018"
                        ]
                    ],
                    "items": {
                        "type": "string"
                    },
                    "title": "Tags",
                    "type": "array"
                },
                "version": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Version"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The version of the resource following SemVer 2.0."
                },
                "version_number": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "version number (n-th published version, not the semantic version)",
                    "title": "Version Number"
                },
                "format_version": {
                    "const": "0.2.4",
                    "default": "0.2.4",
                    "description": "The format version of this resource specification\n(not the `version` of the resource description)\nWhen creating a new resource always use the latest micro/patch version described here.\nThe `format_version` is important for any consumer software to understand how to parse the fields.",
                    "enum": [
                        "0.2.4"
                    ],
                    "title": "Format Version",
                    "type": "string"
                },
                "badges": {
                    "description": "badges associated with this resource",
                    "items": {
                        "$ref": "#/$defs/BadgeDescr"
                    },
                    "title": "Badges",
                    "type": "array"
                },
                "documentation": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "\u2208\ud83d\udce6 URL or relative path to a markdown file with additional documentation.\nThe recommended documentation file name is `README.md`. An `.md` suffix is mandatory.",
                    "examples": [
                        "https://raw.githubusercontent.com/bioimage-io/spec-bioimage-io/main/example_descriptions/models/unet2d_nuclei_broad/README.md",
                        "README.md"
                    ],
                    "title": "Documentation"
                },
                "license": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A [SPDX license identifier](https://spdx.org/licenses/).\nWe do not support custom license beyond the SPDX license list, if you need that please\n[open a GitHub issue](https://github.com/bioimage-io/spec-bioimage-io/issues/new/choose\n) to discuss your intentions with the community.",
                    "examples": [
                        "CC0-1.0",
                        "MIT",
                        "BSD-2-Clause"
                    ],
                    "title": "License"
                },
                "type": {
                    "const": "dataset",
                    "default": "dataset",
                    "enum": [
                        "dataset"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "bioimage.io-wide unique resource identifier\nassigned by bioimage.io; version **un**specific.",
                    "title": "Id"
                },
                "source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "\"URL to the source of the dataset.",
                    "title": "Source"
                }
            },
            "required": [
                "name",
                "description"
            ],
            "title": "bioimage.io dataset specification",
            "type": "object"
        },
        "bioimageio__spec__dataset__v0_2__LinkedDataset": {
            "additionalProperties": false,
            "description": "Reference to a bioimage.io dataset.",
            "properties": {
                "id": {
                    "description": "A valid dataset `id` from the bioimage.io collection.",
                    "title": "Id",
                    "type": "string"
                },
                "version_number": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "version number (n-th published version, not the semantic version) of linked dataset",
                    "title": "Version Number"
                }
            },
            "required": [
                "id"
            ],
            "title": "LinkedDataset",
            "type": "object"
        },
        "bioimageio__spec__dataset__v0_3__DatasetDescr": {
            "additionalProperties": false,
            "description": "A bioimage.io dataset resource description file (dataset RDF) describes a dataset relevant to bioimage\nprocessing.",
            "properties": {
                "name": {
                    "description": "A human-friendly name of the resource description.\nMay only contains letters, digits, underscore, minus, parentheses and spaces.",
                    "maxLength": 128,
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "description": {
                    "description": "A string containing a brief description.",
                    "maxLength": 1024,
                    "title": "Description",
                    "type": "string"
                },
                "covers": {
                    "description": "Cover images. Please use an image smaller than 500KB and an aspect ratio width to height of 2:1 or 1:1.\nThe supported image formats are: ('.gif', '.jpeg', '.jpg', '.png', '.svg')",
                    "examples": [],
                    "items": {
                        "anyOf": [
                            {
                                "format": "file-path",
                                "type": "string"
                            },
                            {
                                "$ref": "#/$defs/RelativeFilePath"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "title": "Covers",
                    "type": "array"
                },
                "id_emoji": {
                    "anyOf": [
                        {
                            "maxLength": 2,
                            "minLength": 1,
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "UTF-8 emoji for display alongside the `id`.",
                    "title": "Id Emoji"
                },
                "authors": {
                    "description": "The authors are the creators of this resource description and the primary points of contact.",
                    "items": {
                        "$ref": "#/$defs/Author"
                    },
                    "minItems": 1,
                    "title": "Authors",
                    "type": "array"
                },
                "attachments": {
                    "description": "file attachments",
                    "items": {
                        "$ref": "#/$defs/FileDescr"
                    },
                    "title": "Attachments",
                    "type": "array"
                },
                "cite": {
                    "description": "citations",
                    "items": {
                        "$ref": "#/$defs/CiteEntry"
                    },
                    "minItems": 1,
                    "title": "Cite",
                    "type": "array"
                },
                "license": {
                    "description": "A [SPDX license identifier](https://spdx.org/licenses/).\nWe do not support custom license beyond the SPDX license list, if you need that please\n[open a GitHub issue](https://github.com/bioimage-io/spec-bioimage-io/issues/new/choose)\nto discuss your intentions with the community.",
                    "examples": [
                        "CC0-1.0",
                        "MIT",
                        "BSD-2-Clause"
                    ],
                    "title": "License",
                    "type": "string"
                },
                "config": {
                    "additionalProperties": {
                        "$ref": "#/$defs/YamlValue"
                    },
                    "description": "A field for custom configuration that can contain any keys not present in the RDF spec.\nThis means you should not store, for example, a GitHub repo URL in `config` since there is a `git_repo` field.\nKeys in `config` may be very specific to a tool or consumer software. To avoid conflicting definitions,\nit is recommended to wrap added configuration into a sub-field named with the specific domain or tool name,\nfor example:\n```yaml\nconfig:\n    bioimageio:  # here is the domain name\n        my_custom_key: 3837283\n        another_key:\n            nested: value\n    imagej:       # config specific to ImageJ\n        macro_dir: path/to/macro/file\n```\nIf possible, please use [`snake_case`](https://en.wikipedia.org/wiki/Snake_case) for keys in `config`.\nYou may want to list linked files additionally under `attachments` to include them when packaging a resource.\n(Packaging a resource means downloading/copying important linked files and creating a ZIP archive that contains\nan altered rdf.yaml file with local references to the downloaded files.)",
                    "examples": [
                        {
                            "bioimageio": {
                                "another_key": {
                                    "nested": "value"
                                },
                                "my_custom_key": 3837283
                            },
                            "imagej": {
                                "macro_dir": "path/to/macro/file"
                            }
                        }
                    ],
                    "title": "Config",
                    "type": "object"
                },
                "git_repo": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A URL to the Git repository where the resource is being developed.",
                    "examples": [
                        "https://github.com/bioimage-io/spec-bioimage-io/tree/main/example_descriptions/models/unet2d_nuclei_broad"
                    ],
                    "title": "Git Repo"
                },
                "icon": {
                    "anyOf": [
                        {
                            "maxLength": 2,
                            "minLength": 1,
                            "type": "string"
                        },
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "An icon for illustration, e.g. on bioimage.io",
                    "title": "Icon"
                },
                "links": {
                    "description": "IDs of other bioimage.io resources",
                    "examples": [
                        [
                            "ilastik/ilastik",
                            "deepimagej/deepimagej",
                            "zero/notebook_u-net_3d_zerocostdl4mic"
                        ]
                    ],
                    "items": {
                        "type": "string"
                    },
                    "title": "Links",
                    "type": "array"
                },
                "uploader": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Uploader"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The person who uploaded the model (e.g. to bioimage.io)"
                },
                "maintainers": {
                    "description": "Maintainers of this resource.\nIf not specified, `authors` are maintainers and at least some of them has to specify their `github_user` name",
                    "items": {
                        "$ref": "#/$defs/Maintainer"
                    },
                    "title": "Maintainers",
                    "type": "array"
                },
                "tags": {
                    "description": "Associated tags",
                    "examples": [
                        [
                            "unet2d",
                            "pytorch",
                            "nucleus",
                            "segmentation",
                            "dsb2018"
                        ]
                    ],
                    "items": {
                        "type": "string"
                    },
                    "title": "Tags",
                    "type": "array"
                },
                "version": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Version"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The version of the resource following SemVer 2.0."
                },
                "format_version": {
                    "const": "0.3.0",
                    "default": "0.3.0",
                    "description": "The **format** version of this resource specification",
                    "enum": [
                        "0.3.0"
                    ],
                    "title": "Format Version",
                    "type": "string"
                },
                "documentation": {
                    "anyOf": [
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "\u2208\ud83d\udce6 URL or relative path to a markdown file encoded in UTF-8 with additional documentation.\nThe recommended documentation file name is `README.md`. An `.md` suffix is mandatory.",
                    "examples": [
                        "https://raw.githubusercontent.com/bioimage-io/spec-bioimage-io/main/example_descriptions/models/unet2d_nuclei_broad/README.md",
                        "README.md"
                    ],
                    "title": "Documentation"
                },
                "badges": {
                    "description": "badges associated with this resource",
                    "items": {
                        "$ref": "#/$defs/BadgeDescr"
                    },
                    "title": "Badges",
                    "type": "array"
                },
                "type": {
                    "const": "dataset",
                    "default": "dataset",
                    "enum": [
                        "dataset"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "bioimage.io-wide unique resource identifier\nassigned by bioimage.io; version **un**specific.",
                    "title": "Id"
                },
                "parent": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The description from which this one is derived",
                    "title": "Parent"
                },
                "source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "\"URL to the source of the dataset.",
                    "title": "Source"
                }
            },
            "required": [
                "name",
                "description",
                "authors",
                "cite",
                "license"
            ],
            "title": "bioimage.io dataset specification",
            "type": "object"
        },
        "bioimageio__spec__dataset__v0_3__LinkedDataset": {
            "additionalProperties": false,
            "description": "Reference to a bioimage.io dataset.",
            "properties": {
                "version": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Version"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The version of the linked resource following SemVer 2.0."
                },
                "id": {
                    "description": "A valid dataset `id` from the bioimage.io collection.",
                    "title": "Id",
                    "type": "string"
                }
            },
            "required": [
                "id"
            ],
            "title": "LinkedDataset",
            "type": "object"
        },
        "bioimageio__spec__model__v0_4__BinarizeDescr": {
            "additionalProperties": false,
            "description": "BinarizeDescr the tensor with a fixed `BinarizeKwargs.threshold`.\nValues above the threshold will be set to one, values below the threshold to zero.",
            "properties": {
                "name": {
                    "const": "binarize",
                    "default": "binarize",
                    "enum": [
                        "binarize"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "kwargs": {
                    "$ref": "#/$defs/BinarizeKwargs"
                }
            },
            "required": [
                "kwargs"
            ],
            "title": "BinarizeDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_4__ClipDescr": {
            "additionalProperties": false,
            "description": "Clip tensor values to a range.\n\nSet tensor values below `ClipKwargs.min` to `ClipKwargs.min`\nand above `ClipKwargs.max` to `ClipKwargs.max`.",
            "properties": {
                "name": {
                    "const": "clip",
                    "default": "clip",
                    "enum": [
                        "clip"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "kwargs": {
                    "$ref": "#/$defs/ClipKwargs"
                }
            },
            "required": [
                "kwargs"
            ],
            "title": "ClipDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_4__InputTensorDescr": {
            "additionalProperties": false,
            "properties": {
                "name": {
                    "description": "Tensor name. No duplicates are allowed.",
                    "title": "Name",
                    "type": "string"
                },
                "description": {
                    "default": "",
                    "title": "Description",
                    "type": "string"
                },
                "axes": {
                    "description": "Axes identifying characters. Same length and order as the axes in `shape`.\n| axis | description |\n| --- | --- |\n|  b  |  batch (groups multiple samples) |\n|  i  |  instance/index/element |\n|  t  |  time |\n|  c  |  channel |\n|  z  |  spatial dimension z |\n|  y  |  spatial dimension y |\n|  x  |  spatial dimension x |",
                    "title": "Axes",
                    "type": "string"
                },
                "data_range": {
                    "anyOf": [
                        {
                            "maxItems": 2,
                            "minItems": 2,
                            "prefixItems": [
                                {
                                    "type": "number"
                                },
                                {
                                    "type": "number"
                                }
                            ],
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Tuple `(minimum, maximum)` specifying the allowed range of the data in this tensor.\nIf not specified, the full data range that can be expressed in `data_type` is allowed.",
                    "title": "Data Range"
                },
                "data_type": {
                    "description": "For now an input tensor is expected to be given as `float32`.\nThe data flow in bioimage.io models is explained\n[in this diagram.](https://docs.google.com/drawings/d/1FTw8-Rn6a6nXdkZ_SkMumtcjvur9mtIhRqLwnKqZNHM/edit).",
                    "enum": [
                        "float32",
                        "uint8",
                        "uint16"
                    ],
                    "title": "Data Type",
                    "type": "string"
                },
                "shape": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        {
                            "$ref": "#/$defs/ParameterizedInputShape"
                        }
                    ],
                    "description": "Specification of input tensor shape.",
                    "examples": [
                        [
                            1,
                            512,
                            512,
                            1
                        ],
                        {
                            "min": [
                                1,
                                64,
                                64,
                                1
                            ],
                            "step": [
                                0,
                                32,
                                32,
                                0
                            ]
                        }
                    ],
                    "title": "Shape"
                },
                "preprocessing": {
                    "description": "Description of how this input should be preprocessed.",
                    "items": {
                        "discriminator": {
                            "mapping": {
                                "binarize": "#/$defs/bioimageio__spec__model__v0_4__BinarizeDescr",
                                "clip": "#/$defs/bioimageio__spec__model__v0_4__ClipDescr",
                                "scale_linear": "#/$defs/bioimageio__spec__model__v0_4__ScaleLinearDescr",
                                "scale_range": "#/$defs/bioimageio__spec__model__v0_4__ScaleRangeDescr",
                                "sigmoid": "#/$defs/bioimageio__spec__model__v0_4__SigmoidDescr",
                                "zero_mean_unit_variance": "#/$defs/bioimageio__spec__model__v0_4__ZeroMeanUnitVarianceDescr"
                            },
                            "propertyName": "name"
                        },
                        "oneOf": [
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_4__BinarizeDescr"
                            },
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_4__ClipDescr"
                            },
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_4__ScaleLinearDescr"
                            },
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_4__SigmoidDescr"
                            },
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_4__ZeroMeanUnitVarianceDescr"
                            },
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_4__ScaleRangeDescr"
                            }
                        ]
                    },
                    "title": "Preprocessing",
                    "type": "array"
                }
            },
            "required": [
                "name",
                "axes",
                "data_type",
                "shape"
            ],
            "title": "InputTensorDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_4__KerasHdf5WeightsDescr": {
            "additionalProperties": false,
            "properties": {
                "source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        }
                    ],
                    "description": "\u2208\ud83d\udce6 The weights file.",
                    "title": "Source"
                },
                "sha256": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "SHA256 checksum of the source file",
                    "title": "Sha256"
                },
                "attachments": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AttachmentsDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Attachments that are specific to this weights entry."
                },
                "authors": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/$defs/Author"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Authors\nEither the person(s) that have trained this model resulting in the original weights file.\n    (If this is the initial weights entry, i.e. it does not have a `parent`)\nOr the person(s) who have converted the weights to this weights format.\n    (If this is a child weight, i.e. it has a `parent` field)",
                    "title": "Authors"
                },
                "dependencies": {
                    "anyOf": [
                        {
                            "pattern": "^.+:.+$",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Dependency manager and dependency file, specified as `<dependency manager>:<relative file path>`.",
                    "examples": [
                        "conda:environment.yaml",
                        "maven:./pom.xml",
                        "pip:./requirements.txt"
                    ],
                    "title": "Dependencies"
                },
                "parent": {
                    "anyOf": [
                        {
                            "enum": [
                                "keras_hdf5",
                                "onnx",
                                "pytorch_state_dict",
                                "tensorflow_js",
                                "tensorflow_saved_model_bundle",
                                "torchscript"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The source weights these weights were converted from.\nFor example, if a model's weights were converted from the `pytorch_state_dict` format to `torchscript`,\nThe `pytorch_state_dict` weights entry has no `parent` and is the parent of the `torchscript` weights.\nAll weight entries except one (the initial set of weights resulting from training the model),\nneed to have this field.",
                    "examples": [
                        "pytorch_state_dict"
                    ],
                    "title": "Parent"
                },
                "tensorflow_version": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Version"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "TensorFlow version used to create these weights"
                }
            },
            "required": [
                "source"
            ],
            "title": "KerasHdf5WeightsDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_4__LinkedModel": {
            "additionalProperties": false,
            "description": "Reference to a bioimage.io model.",
            "properties": {
                "id": {
                    "description": "A valid model `id` from the bioimage.io collection.",
                    "title": "Id",
                    "type": "string"
                },
                "version_number": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "version number (n-th published version, not the semantic version) of linked model",
                    "title": "Version Number"
                }
            },
            "required": [
                "id"
            ],
            "title": "LinkedModel",
            "type": "object"
        },
        "bioimageio__spec__model__v0_4__ModelDescr": {
            "additionalProperties": false,
            "description": "Specification of the fields used in a bioimage.io-compliant RDF that describes AI models with pretrained weights.\n\nThese fields are typically stored in a YAML file which we call a model resource description file (model RDF).",
            "properties": {
                "name": {
                    "description": "A human-readable name of this model.\nIt should be no longer than 64 characters and only contain letter, number, underscore, minus or space characters.",
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "description": {
                    "title": "Description",
                    "type": "string"
                },
                "covers": {
                    "description": "Cover images. Please use an image smaller than 500KB and an aspect ratio width to height of 2:1.\nThe supported image formats are: ('.gif', '.jpeg', '.jpg', '.png', '.svg', '.tif', '.tiff')",
                    "examples": [
                        "cover.png"
                    ],
                    "items": {
                        "anyOf": [
                            {
                                "format": "file-path",
                                "type": "string"
                            },
                            {
                                "$ref": "#/$defs/RelativeFilePath"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "title": "Covers",
                    "type": "array"
                },
                "id_emoji": {
                    "anyOf": [
                        {
                            "maxLength": 1,
                            "minLength": 1,
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "UTF-8 emoji for display alongside the `id`.",
                    "title": "Id Emoji"
                },
                "authors": {
                    "description": "The authors are the creators of the model RDF and the primary points of contact.",
                    "items": {
                        "$ref": "#/$defs/Author"
                    },
                    "minItems": 1,
                    "title": "Authors",
                    "type": "array"
                },
                "attachments": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AttachmentsDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "file and other attachments"
                },
                "cite": {
                    "description": "citations",
                    "items": {
                        "$ref": "#/$defs/CiteEntry"
                    },
                    "title": "Cite",
                    "type": "array"
                },
                "config": {
                    "additionalProperties": {
                        "$ref": "#/$defs/YamlValue"
                    },
                    "description": "A field for custom configuration that can contain any keys not present in the RDF spec.\nThis means you should not store, for example, a github repo URL in `config` since we already have the\n`git_repo` field defined in the spec.\nKeys in `config` may be very specific to a tool or consumer software. To avoid conflicting definitions,\nit is recommended to wrap added configuration into a sub-field named with the specific domain or tool name,\nfor example:\n```yaml\nconfig:\n    bioimageio:  # here is the domain name\n        my_custom_key: 3837283\n        another_key:\n            nested: value\n    imagej:       # config specific to ImageJ\n        macro_dir: path/to/macro/file\n```\nIf possible, please use [`snake_case`](https://en.wikipedia.org/wiki/Snake_case) for keys in `config`.\nYou may want to list linked files additionally under `attachments` to include them when packaging a resource\n(packaging a resource means downloading/copying important linked files and creating a ZIP archive that contains\nan altered rdf.yaml file with local references to the downloaded files)",
                    "examples": [
                        {
                            "bioimageio": {
                                "another_key": {
                                    "nested": "value"
                                },
                                "my_custom_key": 3837283
                            },
                            "imagej": {
                                "macro_dir": "path/to/macro/file"
                            }
                        }
                    ],
                    "title": "Config",
                    "type": "object"
                },
                "download_url": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URL to download the resource from (deprecated)",
                    "title": "Download Url"
                },
                "git_repo": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A URL to the Git repository where the resource is being developed.",
                    "examples": [
                        "https://github.com/bioimage-io/spec-bioimage-io/tree/main/example_descriptions/models/unet2d_nuclei_broad"
                    ],
                    "title": "Git Repo"
                },
                "icon": {
                    "anyOf": [
                        {
                            "maxLength": 2,
                            "minLength": 1,
                            "type": "string"
                        },
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "An icon for illustration",
                    "title": "Icon"
                },
                "links": {
                    "description": "IDs of other bioimage.io resources",
                    "examples": [
                        [
                            "ilastik/ilastik",
                            "deepimagej/deepimagej",
                            "zero/notebook_u-net_3d_zerocostdl4mic"
                        ]
                    ],
                    "items": {
                        "type": "string"
                    },
                    "title": "Links",
                    "type": "array"
                },
                "uploader": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Uploader"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The person who uploaded the model (e.g. to bioimage.io)"
                },
                "maintainers": {
                    "description": "Maintainers of this resource.\nIf not specified `authors` are maintainers and at least some of them should specify their `github_user` name",
                    "items": {
                        "$ref": "#/$defs/Maintainer"
                    },
                    "title": "Maintainers",
                    "type": "array"
                },
                "rdf_source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Resource description file (RDF) source; used to keep track of where an rdf.yaml was loaded from.\nDo not set this field in a YAML file.",
                    "title": "Rdf Source"
                },
                "tags": {
                    "description": "Associated tags",
                    "examples": [
                        [
                            "unet2d",
                            "pytorch",
                            "nucleus",
                            "segmentation",
                            "dsb2018"
                        ]
                    ],
                    "items": {
                        "type": "string"
                    },
                    "title": "Tags",
                    "type": "array"
                },
                "version": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Version"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The version of the resource following SemVer 2.0."
                },
                "version_number": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "version number (n-th published version, not the semantic version)",
                    "title": "Version Number"
                },
                "format_version": {
                    "const": "0.4.10",
                    "default": "0.4.10",
                    "description": "Version of the bioimage.io model description specification used.\nWhen creating a new model always use the latest micro/patch version described here.\nThe `format_version` is important for any consumer software to understand how to parse the fields.",
                    "enum": [
                        "0.4.10"
                    ],
                    "title": "Format Version",
                    "type": "string"
                },
                "type": {
                    "const": "model",
                    "default": "model",
                    "description": "Specialized resource type 'model'",
                    "enum": [
                        "model"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "bioimage.io-wide unique resource identifier\nassigned by bioimage.io; version **un**specific.",
                    "title": "Id"
                },
                "documentation": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        }
                    ],
                    "description": "\u2208\ud83d\udce6 URL or relative path to a markdown file with additional documentation.\nThe recommended documentation file name is `README.md`. An `.md` suffix is mandatory.\nThe documentation should include a '[#[#]]# Validation' (sub)section\nwith details on how to quantitatively validate the model on unseen data.",
                    "examples": [
                        "https://raw.githubusercontent.com/bioimage-io/spec-bioimage-io/main/example_descriptions/models/unet2d_nuclei_broad/README.md",
                        "README.md"
                    ],
                    "title": "Documentation"
                },
                "inputs": {
                    "description": "Describes the input tensors expected by this model.",
                    "items": {
                        "$ref": "#/$defs/bioimageio__spec__model__v0_4__InputTensorDescr"
                    },
                    "minItems": 1,
                    "title": "Inputs",
                    "type": "array"
                },
                "license": {
                    "description": "A [SPDX license identifier](https://spdx.org/licenses/).\nWe do notsupport custom license beyond the SPDX license list, if you need that please\n[open a GitHub issue](https://github.com/bioimage-io/spec-bioimage-io/issues/new/choose\n) to discuss your intentions with the community.",
                    "examples": [
                        "CC0-1.0",
                        "MIT",
                        "BSD-2-Clause"
                    ],
                    "title": "License",
                    "type": "string"
                },
                "outputs": {
                    "description": "Describes the output tensors.",
                    "items": {
                        "$ref": "#/$defs/bioimageio__spec__model__v0_4__OutputTensorDescr"
                    },
                    "minItems": 1,
                    "title": "Outputs",
                    "type": "array"
                },
                "packaged_by": {
                    "description": "The persons that have packaged and uploaded this model.\nOnly required if those persons differ from the `authors`.",
                    "items": {
                        "$ref": "#/$defs/Author"
                    },
                    "title": "Packaged By",
                    "type": "array"
                },
                "parent": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/bioimageio__spec__model__v0_4__LinkedModel"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The model from which this model is derived, e.g. by fine-tuning the weights."
                },
                "run_mode": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/RunMode"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Custom run mode for this model: for more complex prediction procedures like test time\ndata augmentation that currently cannot be expressed in the specification.\nNo standard run modes are defined yet."
                },
                "sample_inputs": {
                    "description": "\u2208\ud83d\udce6 URLs/relative paths to sample inputs to illustrate possible inputs for the model,\nfor example stored as PNG or TIFF images.\nThe sample files primarily serve to inform a human user about an example use case",
                    "items": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "$ref": "#/$defs/RelativeFilePath"
                            },
                            {
                                "format": "file-path",
                                "type": "string"
                            }
                        ]
                    },
                    "title": "Sample Inputs",
                    "type": "array"
                },
                "sample_outputs": {
                    "description": "\u2208\ud83d\udce6 URLs/relative paths to sample outputs corresponding to the `sample_inputs`.",
                    "items": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "$ref": "#/$defs/RelativeFilePath"
                            },
                            {
                                "format": "file-path",
                                "type": "string"
                            }
                        ]
                    },
                    "title": "Sample Outputs",
                    "type": "array"
                },
                "test_inputs": {
                    "description": "\u2208\ud83d\udce6 Test input tensors compatible with the `inputs` description for a **single test case**.\nThis means if your model has more than one input, you should provide one URL/relative path for each input.\nEach test input should be a file with an ndarray in\n[numpy.lib file format](https://numpy.org/doc/stable/reference/generated/numpy.lib.format.html#module-numpy.lib.format).\nThe extension must be '.npy'.",
                    "items": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "$ref": "#/$defs/RelativeFilePath"
                            },
                            {
                                "format": "file-path",
                                "type": "string"
                            }
                        ]
                    },
                    "minItems": 1,
                    "title": "Test Inputs",
                    "type": "array"
                },
                "test_outputs": {
                    "description": "\u2208\ud83d\udce6 Analog to `test_inputs`.",
                    "items": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "$ref": "#/$defs/RelativeFilePath"
                            },
                            {
                                "format": "file-path",
                                "type": "string"
                            }
                        ]
                    },
                    "minItems": 1,
                    "title": "Test Outputs",
                    "type": "array"
                },
                "timestamp": {
                    "$ref": "#/$defs/Datetime"
                },
                "training_data": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/bioimageio__spec__dataset__v0_2__LinkedDataset"
                        },
                        {
                            "$ref": "#/$defs/bioimageio__spec__dataset__v0_2__DatasetDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The dataset used to train this model",
                    "title": "Training Data"
                },
                "weights": {
                    "$ref": "#/$defs/bioimageio__spec__model__v0_4__WeightsDescr",
                    "description": "The weights for this model.\nWeights can be given for different formats, but should otherwise be equivalent.\nThe available weight formats determine which consumers can use this model."
                }
            },
            "required": [
                "name",
                "description",
                "authors",
                "documentation",
                "inputs",
                "license",
                "outputs",
                "test_inputs",
                "test_outputs",
                "timestamp",
                "weights"
            ],
            "title": "bioimage.io model specification",
            "type": "object"
        },
        "bioimageio__spec__model__v0_4__OnnxWeightsDescr": {
            "additionalProperties": false,
            "properties": {
                "source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        }
                    ],
                    "description": "\u2208\ud83d\udce6 The weights file.",
                    "title": "Source"
                },
                "sha256": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "SHA256 checksum of the source file",
                    "title": "Sha256"
                },
                "attachments": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AttachmentsDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Attachments that are specific to this weights entry."
                },
                "authors": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/$defs/Author"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Authors\nEither the person(s) that have trained this model resulting in the original weights file.\n    (If this is the initial weights entry, i.e. it does not have a `parent`)\nOr the person(s) who have converted the weights to this weights format.\n    (If this is a child weight, i.e. it has a `parent` field)",
                    "title": "Authors"
                },
                "dependencies": {
                    "anyOf": [
                        {
                            "pattern": "^.+:.+$",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Dependency manager and dependency file, specified as `<dependency manager>:<relative file path>`.",
                    "examples": [
                        "conda:environment.yaml",
                        "maven:./pom.xml",
                        "pip:./requirements.txt"
                    ],
                    "title": "Dependencies"
                },
                "parent": {
                    "anyOf": [
                        {
                            "enum": [
                                "keras_hdf5",
                                "onnx",
                                "pytorch_state_dict",
                                "tensorflow_js",
                                "tensorflow_saved_model_bundle",
                                "torchscript"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The source weights these weights were converted from.\nFor example, if a model's weights were converted from the `pytorch_state_dict` format to `torchscript`,\nThe `pytorch_state_dict` weights entry has no `parent` and is the parent of the `torchscript` weights.\nAll weight entries except one (the initial set of weights resulting from training the model),\nneed to have this field.",
                    "examples": [
                        "pytorch_state_dict"
                    ],
                    "title": "Parent"
                },
                "opset_version": {
                    "anyOf": [
                        {
                            "minimum": 7,
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "ONNX opset version",
                    "title": "Opset Version"
                }
            },
            "required": [
                "source"
            ],
            "title": "OnnxWeightsDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_4__OutputTensorDescr": {
            "additionalProperties": false,
            "properties": {
                "name": {
                    "description": "Tensor name. No duplicates are allowed.",
                    "title": "Name",
                    "type": "string"
                },
                "description": {
                    "default": "",
                    "title": "Description",
                    "type": "string"
                },
                "axes": {
                    "description": "Axes identifying characters. Same length and order as the axes in `shape`.\n| axis | description |\n| --- | --- |\n|  b  |  batch (groups multiple samples) |\n|  i  |  instance/index/element |\n|  t  |  time |\n|  c  |  channel |\n|  z  |  spatial dimension z |\n|  y  |  spatial dimension y |\n|  x  |  spatial dimension x |",
                    "title": "Axes",
                    "type": "string"
                },
                "data_range": {
                    "anyOf": [
                        {
                            "maxItems": 2,
                            "minItems": 2,
                            "prefixItems": [
                                {
                                    "type": "number"
                                },
                                {
                                    "type": "number"
                                }
                            ],
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Tuple `(minimum, maximum)` specifying the allowed range of the data in this tensor.\nIf not specified, the full data range that can be expressed in `data_type` is allowed.",
                    "title": "Data Range"
                },
                "data_type": {
                    "description": "Data type.\nThe data flow in bioimage.io models is explained\n[in this diagram.](https://docs.google.com/drawings/d/1FTw8-Rn6a6nXdkZ_SkMumtcjvur9mtIhRqLwnKqZNHM/edit).",
                    "enum": [
                        "float32",
                        "float64",
                        "uint8",
                        "int8",
                        "uint16",
                        "int16",
                        "uint32",
                        "int32",
                        "uint64",
                        "int64",
                        "bool"
                    ],
                    "title": "Data Type",
                    "type": "string"
                },
                "shape": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        {
                            "$ref": "#/$defs/ImplicitOutputShape"
                        }
                    ],
                    "description": "Output tensor shape.",
                    "title": "Shape"
                },
                "halo": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The `halo` that should be cropped from the output tensor to avoid boundary effects.\nThe `halo` is to be cropped from both sides, i.e. `shape_after_crop = shape - 2 * halo`.\nTo document a `halo` that is already cropped by the model `shape.offset` has to be used instead.",
                    "title": "Halo"
                },
                "postprocessing": {
                    "description": "Description of how this output should be postprocessed.",
                    "items": {
                        "discriminator": {
                            "mapping": {
                                "binarize": "#/$defs/bioimageio__spec__model__v0_4__BinarizeDescr",
                                "clip": "#/$defs/bioimageio__spec__model__v0_4__ClipDescr",
                                "scale_linear": "#/$defs/bioimageio__spec__model__v0_4__ScaleLinearDescr",
                                "scale_mean_variance": "#/$defs/bioimageio__spec__model__v0_4__ScaleMeanVarianceDescr",
                                "scale_range": "#/$defs/bioimageio__spec__model__v0_4__ScaleRangeDescr",
                                "sigmoid": "#/$defs/bioimageio__spec__model__v0_4__SigmoidDescr",
                                "zero_mean_unit_variance": "#/$defs/bioimageio__spec__model__v0_4__ZeroMeanUnitVarianceDescr"
                            },
                            "propertyName": "name"
                        },
                        "oneOf": [
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_4__BinarizeDescr"
                            },
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_4__ClipDescr"
                            },
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_4__ScaleLinearDescr"
                            },
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_4__SigmoidDescr"
                            },
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_4__ZeroMeanUnitVarianceDescr"
                            },
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_4__ScaleRangeDescr"
                            },
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_4__ScaleMeanVarianceDescr"
                            }
                        ]
                    },
                    "title": "Postprocessing",
                    "type": "array"
                }
            },
            "required": [
                "name",
                "axes",
                "data_type",
                "shape"
            ],
            "title": "OutputTensorDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_4__PytorchStateDictWeightsDescr": {
            "additionalProperties": false,
            "properties": {
                "source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        }
                    ],
                    "description": "\u2208\ud83d\udce6 The weights file.",
                    "title": "Source"
                },
                "sha256": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "SHA256 checksum of the source file",
                    "title": "Sha256"
                },
                "attachments": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AttachmentsDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Attachments that are specific to this weights entry."
                },
                "authors": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/$defs/Author"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Authors\nEither the person(s) that have trained this model resulting in the original weights file.\n    (If this is the initial weights entry, i.e. it does not have a `parent`)\nOr the person(s) who have converted the weights to this weights format.\n    (If this is a child weight, i.e. it has a `parent` field)",
                    "title": "Authors"
                },
                "dependencies": {
                    "anyOf": [
                        {
                            "pattern": "^.+:.+$",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Dependency manager and dependency file, specified as `<dependency manager>:<relative file path>`.",
                    "examples": [
                        "conda:environment.yaml",
                        "maven:./pom.xml",
                        "pip:./requirements.txt"
                    ],
                    "title": "Dependencies"
                },
                "parent": {
                    "anyOf": [
                        {
                            "enum": [
                                "keras_hdf5",
                                "onnx",
                                "pytorch_state_dict",
                                "tensorflow_js",
                                "tensorflow_saved_model_bundle",
                                "torchscript"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The source weights these weights were converted from.\nFor example, if a model's weights were converted from the `pytorch_state_dict` format to `torchscript`,\nThe `pytorch_state_dict` weights entry has no `parent` and is the parent of the `torchscript` weights.\nAll weight entries except one (the initial set of weights resulting from training the model),\nneed to have this field.",
                    "examples": [
                        "pytorch_state_dict"
                    ],
                    "title": "Parent"
                },
                "architecture": {
                    "anyOf": [
                        {
                            "pattern": "^.+:.+$",
                            "type": "string"
                        },
                        {
                            "pattern": "^.+\\..+$",
                            "type": "string"
                        }
                    ],
                    "description": "callable returning a torch.nn.Module instance.\nLocal implementation: `<relative path to file>:<identifier of implementation within the file>`.\nImplementation in a dependency: `<dependency-package>.<[dependency-module]>.<identifier>`.",
                    "examples": [
                        "my_function.py:MyNetworkClass",
                        "my_module.submodule.get_my_model"
                    ],
                    "title": "Architecture"
                },
                "architecture_sha256": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The SHA256 of the architecture source file, if the architecture is not defined in a module listed in `dependencies`\nYou can drag and drop your file to this\n[online tool](http://emn178.github.io/online-tools/sha256_checksum.html) to generate a SHA256 in your browser.\nOr you can generate a SHA256 checksum with Python's `hashlib`,\n[here is a codesnippet](https://gist.github.com/FynnBe/e64460463df89439cff218bbf59c1100).",
                    "title": "Architecture Sha256"
                },
                "kwargs": {
                    "description": "key word arguments for the `architecture` callable",
                    "title": "Kwargs",
                    "type": "object"
                },
                "pytorch_version": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Version"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Version of the PyTorch library used.\nIf `depencencies` is specified it should include pytorch and the verison has to match.\n(`dependencies` overrules `pytorch_version`)"
                }
            },
            "required": [
                "source",
                "architecture"
            ],
            "title": "PytorchStateDictWeightsDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_4__ScaleLinearDescr": {
            "additionalProperties": false,
            "description": "Fixed linear scaling.",
            "properties": {
                "name": {
                    "const": "scale_linear",
                    "default": "scale_linear",
                    "enum": [
                        "scale_linear"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "kwargs": {
                    "$ref": "#/$defs/bioimageio__spec__model__v0_4__ScaleLinearKwargs"
                }
            },
            "required": [
                "kwargs"
            ],
            "title": "ScaleLinearDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_4__ScaleLinearKwargs": {
            "additionalProperties": false,
            "description": "key word arguments for `ScaleLinearDescr`",
            "properties": {
                "axes": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The subset of axes to scale jointly.\nFor example xy to scale the two image axes for 2d data jointly.",
                    "examples": [
                        "xy"
                    ],
                    "title": "Axes"
                },
                "gain": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "items": {
                                "type": "number"
                            },
                            "type": "array"
                        }
                    ],
                    "default": 1.0,
                    "description": "multiplicative factor",
                    "title": "Gain"
                },
                "offset": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "items": {
                                "type": "number"
                            },
                            "type": "array"
                        }
                    ],
                    "default": 0.0,
                    "description": "additive term",
                    "title": "Offset"
                }
            },
            "title": "ScaleLinearKwargs",
            "type": "object"
        },
        "bioimageio__spec__model__v0_4__ScaleMeanVarianceDescr": {
            "additionalProperties": false,
            "description": "Scale the tensor s.t. its mean and variance match a reference tensor.",
            "properties": {
                "name": {
                    "const": "scale_mean_variance",
                    "default": "scale_mean_variance",
                    "enum": [
                        "scale_mean_variance"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "kwargs": {
                    "$ref": "#/$defs/bioimageio__spec__model__v0_4__ScaleMeanVarianceKwargs"
                }
            },
            "required": [
                "kwargs"
            ],
            "title": "ScaleMeanVarianceDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_4__ScaleMeanVarianceKwargs": {
            "additionalProperties": false,
            "description": "key word arguments for `ScaleMeanVarianceDescr`",
            "properties": {
                "mode": {
                    "description": "Mode for computing mean and variance.\n|     mode    |             description              |\n| ----------- | ------------------------------------ |\n| per_dataset | Compute for the entire dataset       |\n| per_sample  | Compute for each sample individually |",
                    "enum": [
                        "per_dataset",
                        "per_sample"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "reference_tensor": {
                    "description": "Name of tensor to match.",
                    "title": "Reference Tensor",
                    "type": "string"
                },
                "axes": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The subset of axes to scale jointly.\nFor example xy to normalize the two image axes for 2d data jointly.\nDefault: scale all non-batch axes jointly.",
                    "examples": [
                        "xy"
                    ],
                    "title": "Axes"
                },
                "eps": {
                    "default": 1e-06,
                    "description": "Epsilon for numeric stability:\n\"`out  = (tensor - mean) / (std + eps) * (ref_std + eps) + ref_mean.",
                    "exclusiveMinimum": 0.0,
                    "maximum": 0.1,
                    "title": "Eps",
                    "type": "number"
                }
            },
            "required": [
                "mode",
                "reference_tensor"
            ],
            "title": "ScaleMeanVarianceKwargs",
            "type": "object"
        },
        "bioimageio__spec__model__v0_4__ScaleRangeDescr": {
            "additionalProperties": false,
            "description": "Scale with percentiles.",
            "properties": {
                "name": {
                    "const": "scale_range",
                    "default": "scale_range",
                    "enum": [
                        "scale_range"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "kwargs": {
                    "$ref": "#/$defs/bioimageio__spec__model__v0_4__ScaleRangeKwargs"
                }
            },
            "required": [
                "kwargs"
            ],
            "title": "ScaleRangeDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_4__ScaleRangeKwargs": {
            "additionalProperties": false,
            "description": "key word arguments for `ScaleRangeDescr`\n\nFor `min_percentile`=0.0 (the default) and `max_percentile`=100 (the default)\nthis processing step normalizes data to the [0, 1] intervall.\nFor other percentiles the normalized values will partially be outside the [0, 1]\nintervall. Use `ScaleRange` followed by `ClipDescr` if you want to limit the\nnormalized values to a range.",
            "properties": {
                "mode": {
                    "description": "Mode for computing percentiles.\n|     mode    |             description              |\n| ----------- | ------------------------------------ |\n| per_dataset | compute for the entire dataset       |\n| per_sample  | compute for each sample individually |",
                    "enum": [
                        "per_dataset",
                        "per_sample"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "axes": {
                    "description": "The subset of axes to normalize jointly.\nFor example xy to normalize the two image axes for 2d data jointly.",
                    "examples": [
                        "xy"
                    ],
                    "title": "Axes",
                    "type": "string"
                },
                "min_percentile": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "default": 0.0,
                    "description": "The lower percentile used to determine the value to align with zero.",
                    "ge": 0,
                    "lt": 100,
                    "title": "Min Percentile"
                },
                "max_percentile": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "number"
                        }
                    ],
                    "default": 100.0,
                    "description": "The upper percentile used to determine the value to align with one.\nHas to be bigger than `min_percentile`.\nThe range is 1 to 100 instead of 0 to 100 to avoid mistakenly\naccepting percentiles specified in the range 0.0 to 1.0.",
                    "gt": 1,
                    "le": 100,
                    "title": "Max Percentile"
                },
                "eps": {
                    "default": 1e-06,
                    "description": "Epsilon for numeric stability.\n`out = (tensor - v_lower) / (v_upper - v_lower + eps)`;\nwith `v_lower,v_upper` values at the respective percentiles.",
                    "exclusiveMinimum": 0.0,
                    "maximum": 0.1,
                    "title": "Eps",
                    "type": "number"
                },
                "reference_tensor": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Tensor name to compute the percentiles from. Default: The tensor itself.\nFor any tensor in `inputs` only input tensor references are allowed.\nFor a tensor in `outputs` only input tensor refereences are allowed if `mode: per_dataset`",
                    "title": "Reference Tensor"
                }
            },
            "required": [
                "mode",
                "axes"
            ],
            "title": "ScaleRangeKwargs",
            "type": "object"
        },
        "bioimageio__spec__model__v0_4__SigmoidDescr": {
            "additionalProperties": false,
            "description": "The logistic sigmoid funciton, a.k.a. expit function.",
            "properties": {
                "name": {
                    "const": "sigmoid",
                    "default": "sigmoid",
                    "enum": [
                        "sigmoid"
                    ],
                    "title": "Name",
                    "type": "string"
                }
            },
            "title": "SigmoidDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_4__TensorflowJsWeightsDescr": {
            "additionalProperties": false,
            "properties": {
                "source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        }
                    ],
                    "description": "\u2208\ud83d\udce6 The multi-file weights.\nAll required files/folders should be a zip archive.",
                    "title": "Source"
                },
                "sha256": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "SHA256 checksum of the source file",
                    "title": "Sha256"
                },
                "attachments": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AttachmentsDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Attachments that are specific to this weights entry."
                },
                "authors": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/$defs/Author"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Authors\nEither the person(s) that have trained this model resulting in the original weights file.\n    (If this is the initial weights entry, i.e. it does not have a `parent`)\nOr the person(s) who have converted the weights to this weights format.\n    (If this is a child weight, i.e. it has a `parent` field)",
                    "title": "Authors"
                },
                "dependencies": {
                    "anyOf": [
                        {
                            "pattern": "^.+:.+$",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Dependency manager and dependency file, specified as `<dependency manager>:<relative file path>`.",
                    "examples": [
                        "conda:environment.yaml",
                        "maven:./pom.xml",
                        "pip:./requirements.txt"
                    ],
                    "title": "Dependencies"
                },
                "parent": {
                    "anyOf": [
                        {
                            "enum": [
                                "keras_hdf5",
                                "onnx",
                                "pytorch_state_dict",
                                "tensorflow_js",
                                "tensorflow_saved_model_bundle",
                                "torchscript"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The source weights these weights were converted from.\nFor example, if a model's weights were converted from the `pytorch_state_dict` format to `torchscript`,\nThe `pytorch_state_dict` weights entry has no `parent` and is the parent of the `torchscript` weights.\nAll weight entries except one (the initial set of weights resulting from training the model),\nneed to have this field.",
                    "examples": [
                        "pytorch_state_dict"
                    ],
                    "title": "Parent"
                },
                "tensorflow_version": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Version"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Version of the TensorFlow library used."
                }
            },
            "required": [
                "source"
            ],
            "title": "TensorflowJsWeightsDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_4__TensorflowSavedModelBundleWeightsDescr": {
            "additionalProperties": false,
            "properties": {
                "source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        }
                    ],
                    "description": "\u2208\ud83d\udce6 The weights file.",
                    "title": "Source"
                },
                "sha256": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "SHA256 checksum of the source file",
                    "title": "Sha256"
                },
                "attachments": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AttachmentsDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Attachments that are specific to this weights entry."
                },
                "authors": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/$defs/Author"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Authors\nEither the person(s) that have trained this model resulting in the original weights file.\n    (If this is the initial weights entry, i.e. it does not have a `parent`)\nOr the person(s) who have converted the weights to this weights format.\n    (If this is a child weight, i.e. it has a `parent` field)",
                    "title": "Authors"
                },
                "dependencies": {
                    "anyOf": [
                        {
                            "pattern": "^.+:.+$",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Dependency manager and dependency file, specified as `<dependency manager>:<relative file path>`.",
                    "examples": [
                        "conda:environment.yaml",
                        "maven:./pom.xml",
                        "pip:./requirements.txt"
                    ],
                    "title": "Dependencies"
                },
                "parent": {
                    "anyOf": [
                        {
                            "enum": [
                                "keras_hdf5",
                                "onnx",
                                "pytorch_state_dict",
                                "tensorflow_js",
                                "tensorflow_saved_model_bundle",
                                "torchscript"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The source weights these weights were converted from.\nFor example, if a model's weights were converted from the `pytorch_state_dict` format to `torchscript`,\nThe `pytorch_state_dict` weights entry has no `parent` and is the parent of the `torchscript` weights.\nAll weight entries except one (the initial set of weights resulting from training the model),\nneed to have this field.",
                    "examples": [
                        "pytorch_state_dict"
                    ],
                    "title": "Parent"
                },
                "tensorflow_version": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Version"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Version of the TensorFlow library used."
                }
            },
            "required": [
                "source"
            ],
            "title": "TensorflowSavedModelBundleWeightsDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_4__TorchscriptWeightsDescr": {
            "additionalProperties": false,
            "properties": {
                "source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        }
                    ],
                    "description": "\u2208\ud83d\udce6 The weights file.",
                    "title": "Source"
                },
                "sha256": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "SHA256 checksum of the source file",
                    "title": "Sha256"
                },
                "attachments": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AttachmentsDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Attachments that are specific to this weights entry."
                },
                "authors": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/$defs/Author"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Authors\nEither the person(s) that have trained this model resulting in the original weights file.\n    (If this is the initial weights entry, i.e. it does not have a `parent`)\nOr the person(s) who have converted the weights to this weights format.\n    (If this is a child weight, i.e. it has a `parent` field)",
                    "title": "Authors"
                },
                "dependencies": {
                    "anyOf": [
                        {
                            "pattern": "^.+:.+$",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Dependency manager and dependency file, specified as `<dependency manager>:<relative file path>`.",
                    "examples": [
                        "conda:environment.yaml",
                        "maven:./pom.xml",
                        "pip:./requirements.txt"
                    ],
                    "title": "Dependencies"
                },
                "parent": {
                    "anyOf": [
                        {
                            "enum": [
                                "keras_hdf5",
                                "onnx",
                                "pytorch_state_dict",
                                "tensorflow_js",
                                "tensorflow_saved_model_bundle",
                                "torchscript"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The source weights these weights were converted from.\nFor example, if a model's weights were converted from the `pytorch_state_dict` format to `torchscript`,\nThe `pytorch_state_dict` weights entry has no `parent` and is the parent of the `torchscript` weights.\nAll weight entries except one (the initial set of weights resulting from training the model),\nneed to have this field.",
                    "examples": [
                        "pytorch_state_dict"
                    ],
                    "title": "Parent"
                },
                "pytorch_version": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Version"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Version of the PyTorch library used."
                }
            },
            "required": [
                "source"
            ],
            "title": "TorchscriptWeightsDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_4__WeightsDescr": {
            "additionalProperties": false,
            "properties": {
                "keras_hdf5": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/bioimageio__spec__model__v0_4__KerasHdf5WeightsDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "onnx": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/bioimageio__spec__model__v0_4__OnnxWeightsDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "pytorch_state_dict": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/bioimageio__spec__model__v0_4__PytorchStateDictWeightsDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "tensorflow_js": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/bioimageio__spec__model__v0_4__TensorflowJsWeightsDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "tensorflow_saved_model_bundle": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/bioimageio__spec__model__v0_4__TensorflowSavedModelBundleWeightsDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "torchscript": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/bioimageio__spec__model__v0_4__TorchscriptWeightsDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                }
            },
            "title": "WeightsDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_4__ZeroMeanUnitVarianceDescr": {
            "additionalProperties": false,
            "description": "Subtract mean and divide by variance.",
            "properties": {
                "name": {
                    "const": "zero_mean_unit_variance",
                    "default": "zero_mean_unit_variance",
                    "enum": [
                        "zero_mean_unit_variance"
                    ],
                    "title": "Name",
                    "type": "string"
                },
                "kwargs": {
                    "$ref": "#/$defs/bioimageio__spec__model__v0_4__ZeroMeanUnitVarianceKwargs"
                }
            },
            "required": [
                "kwargs"
            ],
            "title": "ZeroMeanUnitVarianceDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_4__ZeroMeanUnitVarianceKwargs": {
            "additionalProperties": false,
            "description": "key word arguments for `ZeroMeanUnitVarianceDescr`",
            "properties": {
                "mode": {
                    "default": "fixed",
                    "description": "Mode for computing mean and variance.\n|     mode    |             description              |\n| ----------- | ------------------------------------ |\n|   fixed     | Fixed values for mean and variance   |\n| per_dataset | Compute for the entire dataset       |\n| per_sample  | Compute for each sample individually |",
                    "enum": [
                        "fixed",
                        "per_dataset",
                        "per_sample"
                    ],
                    "title": "Mode",
                    "type": "string"
                },
                "axes": {
                    "description": "The subset of axes to normalize jointly.\nFor example `xy` to normalize the two image axes for 2d data jointly.",
                    "examples": [
                        "xy"
                    ],
                    "title": "Axes",
                    "type": "string"
                },
                "mean": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "items": {
                                "type": "number"
                            },
                            "minItems": 1,
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The mean value(s) to use for `mode: fixed`.\nFor example `[1.1, 2.2, 3.3]` in the case of a 3 channel image with `axes: xy`.",
                    "examples": [
                        [
                            1.1,
                            2.2,
                            3.3
                        ]
                    ],
                    "title": "Mean"
                },
                "std": {
                    "anyOf": [
                        {
                            "type": "number"
                        },
                        {
                            "items": {
                                "type": "number"
                            },
                            "minItems": 1,
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The standard deviation values to use for `mode: fixed`. Analogous to mean.",
                    "examples": [
                        [
                            0.1,
                            0.2,
                            0.3
                        ]
                    ],
                    "title": "Std"
                },
                "eps": {
                    "default": 1e-06,
                    "description": "epsilon for numeric stability: `out = (tensor - mean) / (std + eps)`.",
                    "exclusiveMinimum": 0.0,
                    "maximum": 0.1,
                    "title": "Eps",
                    "type": "number"
                }
            },
            "required": [
                "axes"
            ],
            "title": "ZeroMeanUnitVarianceKwargs",
            "type": "object"
        },
        "bioimageio__spec__model__v0_5__BinarizeDescr": {
            "additionalProperties": false,
            "description": "Binarize the tensor with a fixed threshold.\n\nValues above `BinarizeKwargs.threshold`/`BinarizeAlongAxisKwargs.threshold`\nwill be set to one, values below the threshold to zero.",
            "properties": {
                "id": {
                    "const": "binarize",
                    "default": "binarize",
                    "enum": [
                        "binarize"
                    ],
                    "title": "Id",
                    "type": "string"
                },
                "kwargs": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/BinarizeKwargs"
                        },
                        {
                            "$ref": "#/$defs/BinarizeAlongAxisKwargs"
                        }
                    ],
                    "title": "Kwargs"
                }
            },
            "required": [
                "kwargs"
            ],
            "title": "BinarizeDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_5__ClipDescr": {
            "additionalProperties": false,
            "description": "Set tensor values below min to min and above max to max.",
            "properties": {
                "id": {
                    "const": "clip",
                    "default": "clip",
                    "enum": [
                        "clip"
                    ],
                    "title": "Id",
                    "type": "string"
                },
                "kwargs": {
                    "$ref": "#/$defs/ClipKwargs"
                }
            },
            "required": [
                "kwargs"
            ],
            "title": "ClipDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_5__InputTensorDescr": {
            "additionalProperties": false,
            "properties": {
                "id": {
                    "default": "input",
                    "description": "Input tensor id.\nNo duplicates are allowed across all inputs and outputs.",
                    "title": "Id",
                    "type": "string"
                },
                "description": {
                    "default": "",
                    "description": "free text description",
                    "maxLength": 128,
                    "title": "Description",
                    "type": "string"
                },
                "axes": {
                    "description": "tensor axes",
                    "items": {
                        "discriminator": {
                            "mapping": {
                                "batch": "#/$defs/BatchAxis",
                                "channel": "#/$defs/ChannelAxis",
                                "index": "#/$defs/IndexInputAxis",
                                "space": "#/$defs/SpaceInputAxis",
                                "time": "#/$defs/TimeInputAxis"
                            },
                            "propertyName": "type"
                        },
                        "oneOf": [
                            {
                                "$ref": "#/$defs/BatchAxis"
                            },
                            {
                                "$ref": "#/$defs/ChannelAxis"
                            },
                            {
                                "$ref": "#/$defs/IndexInputAxis"
                            },
                            {
                                "$ref": "#/$defs/TimeInputAxis"
                            },
                            {
                                "$ref": "#/$defs/SpaceInputAxis"
                            }
                        ]
                    },
                    "minItems": 1,
                    "title": "Axes",
                    "type": "array"
                },
                "test_tensor": {
                    "$ref": "#/$defs/FileDescr",
                    "description": "An example tensor to use for testing.\nUsing the model with the test input tensors is expected to yield the test output tensors.\nEach test tensor has be a an ndarray in the\n[numpy.lib file format](https://numpy.org/doc/stable/reference/generated/numpy.lib.format.html#module-numpy.lib.format).\nThe file extension must be '.npy'."
                },
                "sample_tensor": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/FileDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A sample tensor to illustrate a possible input/output for the model,\nThe sample image primarily serves to inform a human user about an example use case\nand is typically stored as .hdf5, .png or .tiff.\nIt has to be readable by the [imageio library](https://imageio.readthedocs.io/en/stable/formats/index.html#supported-formats)\n(numpy's `.npy` format is not supported).\nThe image dimensionality has to match the number of axes specified in this tensor description."
                },
                "data": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/NominalOrOrdinalDataDescr"
                        },
                        {
                            "$ref": "#/$defs/IntervalOrRatioDataDescr"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "$ref": "#/$defs/NominalOrOrdinalDataDescr"
                                    },
                                    {
                                        "$ref": "#/$defs/IntervalOrRatioDataDescr"
                                    }
                                ]
                            },
                            "minItems": 1,
                            "type": "array"
                        }
                    ],
                    "default": {
                        "type": "float32",
                        "range": [
                            null,
                            null
                        ],
                        "unit": "arbitrary unit",
                        "scale": 1.0,
                        "offset": null
                    },
                    "description": "Description of the tensor's data values, optionally per channel.\nIf specified per channel, the data `type` needs to match across channels.",
                    "title": "Data"
                },
                "optional": {
                    "default": false,
                    "description": "indicates that this tensor may be `None`",
                    "title": "Optional",
                    "type": "boolean"
                },
                "preprocessing": {
                    "description": "Description of how this input should be preprocessed.\n\nnotes:\n- If preprocessing does not start with an 'ensure_dtype' entry, it is added\n  to ensure an input tensor's data type matches the input tensor's data description.\n- If preprocessing does not end with an 'ensure_dtype' or 'binarize' entry, an\n  'ensure_dtype' step is added to ensure preprocessing steps are not unintentionally\n  changing the data type.",
                    "items": {
                        "discriminator": {
                            "mapping": {
                                "binarize": "#/$defs/bioimageio__spec__model__v0_5__BinarizeDescr",
                                "clip": "#/$defs/bioimageio__spec__model__v0_5__ClipDescr",
                                "ensure_dtype": "#/$defs/EnsureDtypeDescr",
                                "fixed_zero_mean_unit_variance": "#/$defs/FixedZeroMeanUnitVarianceDescr",
                                "scale_linear": "#/$defs/bioimageio__spec__model__v0_5__ScaleLinearDescr",
                                "scale_range": "#/$defs/bioimageio__spec__model__v0_5__ScaleRangeDescr",
                                "sigmoid": "#/$defs/bioimageio__spec__model__v0_5__SigmoidDescr",
                                "zero_mean_unit_variance": "#/$defs/bioimageio__spec__model__v0_5__ZeroMeanUnitVarianceDescr"
                            },
                            "propertyName": "id"
                        },
                        "oneOf": [
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_5__BinarizeDescr"
                            },
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_5__ClipDescr"
                            },
                            {
                                "$ref": "#/$defs/EnsureDtypeDescr"
                            },
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_5__ScaleLinearDescr"
                            },
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_5__SigmoidDescr"
                            },
                            {
                                "$ref": "#/$defs/FixedZeroMeanUnitVarianceDescr"
                            },
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_5__ZeroMeanUnitVarianceDescr"
                            },
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_5__ScaleRangeDescr"
                            }
                        ]
                    },
                    "title": "Preprocessing",
                    "type": "array"
                }
            },
            "required": [
                "axes",
                "test_tensor"
            ],
            "title": "InputTensorDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_5__KerasHdf5WeightsDescr": {
            "additionalProperties": false,
            "properties": {
                "source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        }
                    ],
                    "description": "\u2208\ud83d\udce6 The weights file.",
                    "title": "Source"
                },
                "sha256": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "SHA256 checksum of the source file",
                    "title": "Sha256"
                },
                "authors": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/$defs/Author"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Authors\nEither the person(s) that have trained this model resulting in the original weights file.\n    (If this is the initial weights entry, i.e. it does not have a `parent`)\nOr the person(s) who have converted the weights to this weights format.\n    (If this is a child weight, i.e. it has a `parent` field)",
                    "title": "Authors"
                },
                "parent": {
                    "anyOf": [
                        {
                            "enum": [
                                "keras_hdf5",
                                "onnx",
                                "pytorch_state_dict",
                                "tensorflow_js",
                                "tensorflow_saved_model_bundle",
                                "torchscript"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The source weights these weights were converted from.\nFor example, if a model's weights were converted from the `pytorch_state_dict` format to `torchscript`,\nThe `pytorch_state_dict` weights entry has no `parent` and is the parent of the `torchscript` weights.\nAll weight entries except one (the initial set of weights resulting from training the model),\nneed to have this field.",
                    "examples": [
                        "pytorch_state_dict"
                    ],
                    "title": "Parent"
                },
                "tensorflow_version": {
                    "$ref": "#/$defs/Version",
                    "description": "TensorFlow version used to create these weights."
                }
            },
            "required": [
                "source",
                "tensorflow_version"
            ],
            "title": "KerasHdf5WeightsDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_5__LinkedModel": {
            "additionalProperties": false,
            "description": "Reference to a bioimage.io model.",
            "properties": {
                "version": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Version"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The version of the linked resource following SemVer 2.0."
                },
                "id": {
                    "description": "A valid model `id` from the bioimage.io collection.",
                    "title": "Id",
                    "type": "string"
                }
            },
            "required": [
                "id"
            ],
            "title": "LinkedModel",
            "type": "object"
        },
        "bioimageio__spec__model__v0_5__ModelDescr": {
            "additionalProperties": false,
            "description": "Specification of the fields used in a bioimage.io-compliant RDF to describe AI models with pretrained weights.\nThese fields are typically stored in a YAML file which we call a model resource description file (model RDF).",
            "properties": {
                "name": {
                    "description": "A human-readable name of this model.\nIt should be no longer than 64 characters\nand may only contain letter, number, underscore, minus, parentheses and spaces.\nWe recommend to chose a name that refers to the model's task and image modality.",
                    "maxLength": 128,
                    "minLength": 5,
                    "title": "Name",
                    "type": "string"
                },
                "description": {
                    "description": "A string containing a brief description.",
                    "maxLength": 1024,
                    "title": "Description",
                    "type": "string"
                },
                "covers": {
                    "description": "Cover images. Please use an image smaller than 500KB and an aspect ratio width to height of 2:1 or 1:1.\nThe supported image formats are: ('.gif', '.jpeg', '.jpg', '.png', '.svg')",
                    "examples": [],
                    "items": {
                        "anyOf": [
                            {
                                "format": "file-path",
                                "type": "string"
                            },
                            {
                                "$ref": "#/$defs/RelativeFilePath"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "title": "Covers",
                    "type": "array"
                },
                "id_emoji": {
                    "anyOf": [
                        {
                            "maxLength": 2,
                            "minLength": 1,
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "UTF-8 emoji for display alongside the `id`.",
                    "title": "Id Emoji"
                },
                "authors": {
                    "description": "The authors are the creators of the model RDF and the primary points of contact.",
                    "items": {
                        "$ref": "#/$defs/Author"
                    },
                    "minItems": 1,
                    "title": "Authors",
                    "type": "array"
                },
                "attachments": {
                    "description": "file attachments",
                    "items": {
                        "$ref": "#/$defs/FileDescr"
                    },
                    "title": "Attachments",
                    "type": "array"
                },
                "cite": {
                    "description": "citations",
                    "items": {
                        "$ref": "#/$defs/CiteEntry"
                    },
                    "minItems": 1,
                    "title": "Cite",
                    "type": "array"
                },
                "license": {
                    "description": "A [SPDX license identifier](https://spdx.org/licenses/).\nWe do not support custom license beyond the SPDX license list, if you need that please\n[open a GitHub issue](https://github.com/bioimage-io/spec-bioimage-io/issues/new/choose)\nto discuss your intentions with the community.",
                    "examples": [
                        "CC0-1.0",
                        "MIT",
                        "BSD-2-Clause"
                    ],
                    "title": "License",
                    "type": "string"
                },
                "config": {
                    "additionalProperties": {
                        "$ref": "#/$defs/YamlValue"
                    },
                    "description": "A field for custom configuration that can contain any keys not present in the RDF spec.\nThis means you should not store, for example, a GitHub repo URL in `config` since there is a `git_repo` field.\nKeys in `config` may be very specific to a tool or consumer software. To avoid conflicting definitions,\nit is recommended to wrap added configuration into a sub-field named with the specific domain or tool name,\nfor example:\n```yaml\nconfig:\n    bioimageio:  # here is the domain name\n        my_custom_key: 3837283\n        another_key:\n            nested: value\n    imagej:       # config specific to ImageJ\n        macro_dir: path/to/macro/file\n```\nIf possible, please use [`snake_case`](https://en.wikipedia.org/wiki/Snake_case) for keys in `config`.\nYou may want to list linked files additionally under `attachments` to include them when packaging a resource.\n(Packaging a resource means downloading/copying important linked files and creating a ZIP archive that contains\nan altered rdf.yaml file with local references to the downloaded files.)",
                    "examples": [
                        {
                            "bioimageio": {
                                "another_key": {
                                    "nested": "value"
                                },
                                "my_custom_key": 3837283
                            },
                            "imagej": {
                                "macro_dir": "path/to/macro/file"
                            }
                        }
                    ],
                    "title": "Config",
                    "type": "object"
                },
                "git_repo": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A URL to the Git repository where the resource is being developed.",
                    "examples": [
                        "https://github.com/bioimage-io/spec-bioimage-io/tree/main/example_descriptions/models/unet2d_nuclei_broad"
                    ],
                    "title": "Git Repo"
                },
                "icon": {
                    "anyOf": [
                        {
                            "maxLength": 2,
                            "minLength": 1,
                            "type": "string"
                        },
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "An icon for illustration, e.g. on bioimage.io",
                    "title": "Icon"
                },
                "links": {
                    "description": "IDs of other bioimage.io resources",
                    "examples": [
                        [
                            "ilastik/ilastik",
                            "deepimagej/deepimagej",
                            "zero/notebook_u-net_3d_zerocostdl4mic"
                        ]
                    ],
                    "items": {
                        "type": "string"
                    },
                    "title": "Links",
                    "type": "array"
                },
                "uploader": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Uploader"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The person who uploaded the model (e.g. to bioimage.io)"
                },
                "maintainers": {
                    "description": "Maintainers of this resource.\nIf not specified, `authors` are maintainers and at least some of them has to specify their `github_user` name",
                    "items": {
                        "$ref": "#/$defs/Maintainer"
                    },
                    "title": "Maintainers",
                    "type": "array"
                },
                "tags": {
                    "description": "Associated tags",
                    "examples": [
                        [
                            "unet2d",
                            "pytorch",
                            "nucleus",
                            "segmentation",
                            "dsb2018"
                        ]
                    ],
                    "items": {
                        "type": "string"
                    },
                    "title": "Tags",
                    "type": "array"
                },
                "version": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Version"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The version of the resource following SemVer 2.0."
                },
                "format_version": {
                    "const": "0.5.3",
                    "default": "0.5.3",
                    "description": "Version of the bioimage.io model description specification used.\nWhen creating a new model always use the latest micro/patch version described here.\nThe `format_version` is important for any consumer software to understand how to parse the fields.",
                    "enum": [
                        "0.5.3"
                    ],
                    "title": "Format Version",
                    "type": "string"
                },
                "type": {
                    "const": "model",
                    "default": "model",
                    "description": "Specialized resource type 'model'",
                    "enum": [
                        "model"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "bioimage.io-wide unique resource identifier\nassigned by bioimage.io; version **un**specific.",
                    "title": "Id"
                },
                "documentation": {
                    "anyOf": [
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "type": "string"
                        }
                    ],
                    "description": "\u2208\ud83d\udce6 URL or relative path to a markdown file with additional documentation.\nThe recommended documentation file name is `README.md`. An `.md` suffix is mandatory.\nThe documentation should include a '#[#] Validation' (sub)section\nwith details on how to quantitatively validate the model on unseen data.",
                    "examples": [
                        "https://raw.githubusercontent.com/bioimage-io/spec-bioimage-io/main/example_descriptions/models/unet2d_nuclei_broad/README.md",
                        "README.md"
                    ],
                    "title": "Documentation"
                },
                "inputs": {
                    "description": "Describes the input tensors expected by this model.",
                    "items": {
                        "$ref": "#/$defs/bioimageio__spec__model__v0_5__InputTensorDescr"
                    },
                    "minItems": 1,
                    "title": "Inputs",
                    "type": "array"
                },
                "outputs": {
                    "description": "Describes the output tensors.",
                    "items": {
                        "$ref": "#/$defs/bioimageio__spec__model__v0_5__OutputTensorDescr"
                    },
                    "minItems": 1,
                    "title": "Outputs",
                    "type": "array"
                },
                "packaged_by": {
                    "description": "The persons that have packaged and uploaded this model.\nOnly required if those persons differ from the `authors`.",
                    "items": {
                        "$ref": "#/$defs/Author"
                    },
                    "title": "Packaged By",
                    "type": "array"
                },
                "parent": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/bioimageio__spec__model__v0_5__LinkedModel"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The model from which this model is derived, e.g. by fine-tuning the weights."
                },
                "run_mode": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/RunMode"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Custom run mode for this model: for more complex prediction procedures like test time\ndata augmentation that currently cannot be expressed in the specification.\nNo standard run modes are defined yet."
                },
                "timestamp": {
                    "$ref": "#/$defs/Datetime",
                    "default": "2024-11-14T23:12:09.399792",
                    "description": "Timestamp in [ISO 8601](#https://en.wikipedia.org/wiki/ISO_8601) format\nwith a few restrictions listed [here](https://docs.python.org/3/library/datetime.html#datetime.datetime.fromisoformat).\n(In Python a datetime object is valid, too)."
                },
                "training_data": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/bioimageio__spec__dataset__v0_3__LinkedDataset"
                        },
                        {
                            "$ref": "#/$defs/bioimageio__spec__dataset__v0_3__DatasetDescr"
                        },
                        {
                            "$ref": "#/$defs/bioimageio__spec__dataset__v0_2__DatasetDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The dataset used to train this model",
                    "title": "Training Data"
                },
                "weights": {
                    "$ref": "#/$defs/bioimageio__spec__model__v0_5__WeightsDescr",
                    "description": "The weights for this model.\nWeights can be given for different formats, but should otherwise be equivalent.\nThe available weight formats determine which consumers can use this model."
                }
            },
            "required": [
                "name",
                "description",
                "authors",
                "cite",
                "license",
                "documentation",
                "inputs",
                "outputs",
                "weights"
            ],
            "title": "bioimage.io model specification",
            "type": "object"
        },
        "bioimageio__spec__model__v0_5__OnnxWeightsDescr": {
            "additionalProperties": false,
            "properties": {
                "source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        }
                    ],
                    "description": "\u2208\ud83d\udce6 The weights file.",
                    "title": "Source"
                },
                "sha256": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "SHA256 checksum of the source file",
                    "title": "Sha256"
                },
                "authors": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/$defs/Author"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Authors\nEither the person(s) that have trained this model resulting in the original weights file.\n    (If this is the initial weights entry, i.e. it does not have a `parent`)\nOr the person(s) who have converted the weights to this weights format.\n    (If this is a child weight, i.e. it has a `parent` field)",
                    "title": "Authors"
                },
                "parent": {
                    "anyOf": [
                        {
                            "enum": [
                                "keras_hdf5",
                                "onnx",
                                "pytorch_state_dict",
                                "tensorflow_js",
                                "tensorflow_saved_model_bundle",
                                "torchscript"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The source weights these weights were converted from.\nFor example, if a model's weights were converted from the `pytorch_state_dict` format to `torchscript`,\nThe `pytorch_state_dict` weights entry has no `parent` and is the parent of the `torchscript` weights.\nAll weight entries except one (the initial set of weights resulting from training the model),\nneed to have this field.",
                    "examples": [
                        "pytorch_state_dict"
                    ],
                    "title": "Parent"
                },
                "opset_version": {
                    "description": "ONNX opset version",
                    "minimum": 7,
                    "title": "Opset Version",
                    "type": "integer"
                }
            },
            "required": [
                "source",
                "opset_version"
            ],
            "title": "OnnxWeightsDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_5__OutputTensorDescr": {
            "additionalProperties": false,
            "properties": {
                "id": {
                    "default": "output",
                    "description": "Output tensor id.\nNo duplicates are allowed across all inputs and outputs.",
                    "title": "Id",
                    "type": "string"
                },
                "description": {
                    "default": "",
                    "description": "free text description",
                    "maxLength": 128,
                    "title": "Description",
                    "type": "string"
                },
                "axes": {
                    "description": "tensor axes",
                    "items": {
                        "discriminator": {
                            "mapping": {
                                "batch": "#/$defs/BatchAxis",
                                "channel": "#/$defs/ChannelAxis",
                                "index": "#/$defs/IndexOutputAxis",
                                "space": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/$defs/SpaceOutputAxis"
                                        },
                                        {
                                            "$ref": "#/$defs/SpaceOutputAxisWithHalo"
                                        }
                                    ]
                                },
                                "time": {
                                    "oneOf": [
                                        {
                                            "$ref": "#/$defs/TimeOutputAxis"
                                        },
                                        {
                                            "$ref": "#/$defs/TimeOutputAxisWithHalo"
                                        }
                                    ]
                                }
                            },
                            "propertyName": "type"
                        },
                        "oneOf": [
                            {
                                "$ref": "#/$defs/BatchAxis"
                            },
                            {
                                "$ref": "#/$defs/ChannelAxis"
                            },
                            {
                                "$ref": "#/$defs/IndexOutputAxis"
                            },
                            {
                                "oneOf": [
                                    {
                                        "$ref": "#/$defs/TimeOutputAxis"
                                    },
                                    {
                                        "$ref": "#/$defs/TimeOutputAxisWithHalo"
                                    }
                                ]
                            },
                            {
                                "oneOf": [
                                    {
                                        "$ref": "#/$defs/SpaceOutputAxis"
                                    },
                                    {
                                        "$ref": "#/$defs/SpaceOutputAxisWithHalo"
                                    }
                                ]
                            }
                        ]
                    },
                    "minItems": 1,
                    "title": "Axes",
                    "type": "array"
                },
                "test_tensor": {
                    "$ref": "#/$defs/FileDescr",
                    "description": "An example tensor to use for testing.\nUsing the model with the test input tensors is expected to yield the test output tensors.\nEach test tensor has be a an ndarray in the\n[numpy.lib file format](https://numpy.org/doc/stable/reference/generated/numpy.lib.format.html#module-numpy.lib.format).\nThe file extension must be '.npy'."
                },
                "sample_tensor": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/FileDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A sample tensor to illustrate a possible input/output for the model,\nThe sample image primarily serves to inform a human user about an example use case\nand is typically stored as .hdf5, .png or .tiff.\nIt has to be readable by the [imageio library](https://imageio.readthedocs.io/en/stable/formats/index.html#supported-formats)\n(numpy's `.npy` format is not supported).\nThe image dimensionality has to match the number of axes specified in this tensor description."
                },
                "data": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/NominalOrOrdinalDataDescr"
                        },
                        {
                            "$ref": "#/$defs/IntervalOrRatioDataDescr"
                        },
                        {
                            "items": {
                                "anyOf": [
                                    {
                                        "$ref": "#/$defs/NominalOrOrdinalDataDescr"
                                    },
                                    {
                                        "$ref": "#/$defs/IntervalOrRatioDataDescr"
                                    }
                                ]
                            },
                            "minItems": 1,
                            "type": "array"
                        }
                    ],
                    "default": {
                        "type": "float32",
                        "range": [
                            null,
                            null
                        ],
                        "unit": "arbitrary unit",
                        "scale": 1.0,
                        "offset": null
                    },
                    "description": "Description of the tensor's data values, optionally per channel.\nIf specified per channel, the data `type` needs to match across channels.",
                    "title": "Data"
                },
                "postprocessing": {
                    "description": "Description of how this output should be postprocessed.\n\nnote: `postprocessing` always ends with an 'ensure_dtype' operation.\n      If not given this is added to cast to this tensor's `data.type`.",
                    "items": {
                        "discriminator": {
                            "mapping": {
                                "binarize": "#/$defs/bioimageio__spec__model__v0_5__BinarizeDescr",
                                "clip": "#/$defs/bioimageio__spec__model__v0_5__ClipDescr",
                                "ensure_dtype": "#/$defs/EnsureDtypeDescr",
                                "fixed_zero_mean_unit_variance": "#/$defs/FixedZeroMeanUnitVarianceDescr",
                                "scale_linear": "#/$defs/bioimageio__spec__model__v0_5__ScaleLinearDescr",
                                "scale_mean_variance": "#/$defs/bioimageio__spec__model__v0_5__ScaleMeanVarianceDescr",
                                "scale_range": "#/$defs/bioimageio__spec__model__v0_5__ScaleRangeDescr",
                                "sigmoid": "#/$defs/bioimageio__spec__model__v0_5__SigmoidDescr",
                                "zero_mean_unit_variance": "#/$defs/bioimageio__spec__model__v0_5__ZeroMeanUnitVarianceDescr"
                            },
                            "propertyName": "id"
                        },
                        "oneOf": [
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_5__BinarizeDescr"
                            },
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_5__ClipDescr"
                            },
                            {
                                "$ref": "#/$defs/EnsureDtypeDescr"
                            },
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_5__ScaleLinearDescr"
                            },
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_5__SigmoidDescr"
                            },
                            {
                                "$ref": "#/$defs/FixedZeroMeanUnitVarianceDescr"
                            },
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_5__ZeroMeanUnitVarianceDescr"
                            },
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_5__ScaleRangeDescr"
                            },
                            {
                                "$ref": "#/$defs/bioimageio__spec__model__v0_5__ScaleMeanVarianceDescr"
                            }
                        ]
                    },
                    "title": "Postprocessing",
                    "type": "array"
                }
            },
            "required": [
                "axes",
                "test_tensor"
            ],
            "title": "OutputTensorDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_5__PytorchStateDictWeightsDescr": {
            "additionalProperties": false,
            "properties": {
                "source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        }
                    ],
                    "description": "\u2208\ud83d\udce6 The weights file.",
                    "title": "Source"
                },
                "sha256": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "SHA256 checksum of the source file",
                    "title": "Sha256"
                },
                "authors": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/$defs/Author"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Authors\nEither the person(s) that have trained this model resulting in the original weights file.\n    (If this is the initial weights entry, i.e. it does not have a `parent`)\nOr the person(s) who have converted the weights to this weights format.\n    (If this is a child weight, i.e. it has a `parent` field)",
                    "title": "Authors"
                },
                "parent": {
                    "anyOf": [
                        {
                            "enum": [
                                "keras_hdf5",
                                "onnx",
                                "pytorch_state_dict",
                                "tensorflow_js",
                                "tensorflow_saved_model_bundle",
                                "torchscript"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The source weights these weights were converted from.\nFor example, if a model's weights were converted from the `pytorch_state_dict` format to `torchscript`,\nThe `pytorch_state_dict` weights entry has no `parent` and is the parent of the `torchscript` weights.\nAll weight entries except one (the initial set of weights resulting from training the model),\nneed to have this field.",
                    "examples": [
                        "pytorch_state_dict"
                    ],
                    "title": "Parent"
                },
                "architecture": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/ArchitectureFromFileDescr"
                        },
                        {
                            "$ref": "#/$defs/ArchitectureFromLibraryDescr"
                        }
                    ],
                    "title": "Architecture"
                },
                "pytorch_version": {
                    "$ref": "#/$defs/Version",
                    "description": "Version of the PyTorch library used.\nIf `architecture.depencencies` is specified it has to include pytorch and any version pinning has to be compatible."
                },
                "dependencies": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/EnvironmentFileDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Custom depencies beyond pytorch.\nThe conda environment file should include pytorch and any version pinning has to be compatible with\n`pytorch_version`."
                }
            },
            "required": [
                "source",
                "architecture",
                "pytorch_version"
            ],
            "title": "PytorchStateDictWeightsDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_5__ScaleLinearDescr": {
            "additionalProperties": false,
            "description": "Fixed linear scaling.",
            "properties": {
                "id": {
                    "const": "scale_linear",
                    "default": "scale_linear",
                    "enum": [
                        "scale_linear"
                    ],
                    "title": "Id",
                    "type": "string"
                },
                "kwargs": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/bioimageio__spec__model__v0_5__ScaleLinearKwargs"
                        },
                        {
                            "$ref": "#/$defs/ScaleLinearAlongAxisKwargs"
                        }
                    ],
                    "title": "Kwargs"
                }
            },
            "required": [
                "kwargs"
            ],
            "title": "ScaleLinearDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_5__ScaleLinearKwargs": {
            "additionalProperties": false,
            "description": "key word arguments for `ScaleLinearDescr`",
            "properties": {
                "gain": {
                    "default": 1.0,
                    "description": "multiplicative factor",
                    "title": "Gain",
                    "type": "number"
                },
                "offset": {
                    "default": 0.0,
                    "description": "additive term",
                    "title": "Offset",
                    "type": "number"
                }
            },
            "title": "ScaleLinearKwargs",
            "type": "object"
        },
        "bioimageio__spec__model__v0_5__ScaleMeanVarianceDescr": {
            "additionalProperties": false,
            "description": "Scale a tensor's data distribution to match another tensor's mean/std.\n`out  = (tensor - mean) / (std + eps) * (ref_std + eps) + ref_mean.`",
            "properties": {
                "id": {
                    "const": "scale_mean_variance",
                    "default": "scale_mean_variance",
                    "enum": [
                        "scale_mean_variance"
                    ],
                    "title": "Id",
                    "type": "string"
                },
                "kwargs": {
                    "$ref": "#/$defs/bioimageio__spec__model__v0_5__ScaleMeanVarianceKwargs"
                }
            },
            "required": [
                "kwargs"
            ],
            "title": "ScaleMeanVarianceDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_5__ScaleMeanVarianceKwargs": {
            "additionalProperties": false,
            "description": "key word arguments for `ScaleMeanVarianceKwargs`",
            "properties": {
                "reference_tensor": {
                    "description": "Name of tensor to match.",
                    "title": "Reference Tensor",
                    "type": "string"
                },
                "axes": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The subset of axes to normalize jointly, i.e. axes to reduce to compute mean/std.\nFor example to normalize 'batch', 'x' and 'y' jointly in a tensor ('batch', 'channel', 'y', 'x')\nresulting in a tensor of equal shape normalized per channel, specify `axes=('batch', 'x', 'y')`.\nTo normalize samples independently, leave out the 'batch' axis.\nDefault: Scale all axes jointly.",
                    "examples": [
                        [
                            "batch",
                            "x",
                            "y"
                        ]
                    ],
                    "title": "Axes"
                },
                "eps": {
                    "default": 1e-06,
                    "description": "Epsilon for numeric stability:\n`out  = (tensor - mean) / (std + eps) * (ref_std + eps) + ref_mean.`",
                    "exclusiveMinimum": 0.0,
                    "maximum": 0.1,
                    "title": "Eps",
                    "type": "number"
                }
            },
            "required": [
                "reference_tensor"
            ],
            "title": "ScaleMeanVarianceKwargs",
            "type": "object"
        },
        "bioimageio__spec__model__v0_5__ScaleRangeDescr": {
            "additionalProperties": false,
            "description": "Scale with percentiles.",
            "properties": {
                "id": {
                    "const": "scale_range",
                    "default": "scale_range",
                    "enum": [
                        "scale_range"
                    ],
                    "title": "Id",
                    "type": "string"
                },
                "kwargs": {
                    "$ref": "#/$defs/bioimageio__spec__model__v0_5__ScaleRangeKwargs"
                }
            },
            "required": [
                "kwargs"
            ],
            "title": "ScaleRangeDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_5__ScaleRangeKwargs": {
            "additionalProperties": false,
            "description": "key word arguments for `ScaleRangeDescr`\n\nFor `min_percentile`=0.0 (the default) and `max_percentile`=100 (the default)\nthis processing step normalizes data to the [0, 1] intervall.\nFor other percentiles the normalized values will partially be outside the [0, 1]\nintervall. Use `ScaleRange` followed by `ClipDescr` if you want to limit the\nnormalized values to a range.",
            "properties": {
                "axes": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The subset of axes to normalize jointly, i.e. axes to reduce to compute the min/max percentile value.\nFor example to normalize 'batch', 'x' and 'y' jointly in a tensor ('batch', 'channel', 'y', 'x')\nresulting in a tensor of equal shape normalized per channel, specify `axes=('batch', 'x', 'y')`.\nTo normalize samples indepdencently, leave out the \"batch\" axis.\nDefault: Scale all axes jointly.",
                    "examples": [
                        [
                            "batch",
                            "x",
                            "y"
                        ]
                    ],
                    "title": "Axes"
                },
                "min_percentile": {
                    "default": 0.0,
                    "description": "The lower percentile used to determine the value to align with zero.",
                    "exclusiveMaximum": 100.0,
                    "minimum": 0.0,
                    "title": "Min Percentile",
                    "type": "number"
                },
                "max_percentile": {
                    "default": 100.0,
                    "description": "The upper percentile used to determine the value to align with one.\nHas to be bigger than `min_percentile`.\nThe range is 1 to 100 instead of 0 to 100 to avoid mistakenly\naccepting percentiles specified in the range 0.0 to 1.0.",
                    "exclusiveMinimum": 1.0,
                    "maximum": 100.0,
                    "title": "Max Percentile",
                    "type": "number"
                },
                "eps": {
                    "default": 1e-06,
                    "description": "Epsilon for numeric stability.\n`out = (tensor - v_lower) / (v_upper - v_lower + eps)`;\nwith `v_lower,v_upper` values at the respective percentiles.",
                    "exclusiveMinimum": 0.0,
                    "maximum": 0.1,
                    "title": "Eps",
                    "type": "number"
                },
                "reference_tensor": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Tensor ID to compute the percentiles from. Default: The tensor itself.\nFor any tensor in `inputs` only input tensor references are allowed.",
                    "title": "Reference Tensor"
                }
            },
            "title": "ScaleRangeKwargs",
            "type": "object"
        },
        "bioimageio__spec__model__v0_5__SigmoidDescr": {
            "additionalProperties": false,
            "description": "The logistic sigmoid funciton, a.k.a. expit function.",
            "properties": {
                "id": {
                    "const": "sigmoid",
                    "default": "sigmoid",
                    "enum": [
                        "sigmoid"
                    ],
                    "title": "Id",
                    "type": "string"
                }
            },
            "title": "SigmoidDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_5__TensorflowJsWeightsDescr": {
            "additionalProperties": false,
            "properties": {
                "source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        }
                    ],
                    "description": "\u2208\ud83d\udce6 The multi-file weights.\nAll required files/folders should be a zip archive.",
                    "title": "Source"
                },
                "sha256": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "SHA256 checksum of the source file",
                    "title": "Sha256"
                },
                "authors": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/$defs/Author"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Authors\nEither the person(s) that have trained this model resulting in the original weights file.\n    (If this is the initial weights entry, i.e. it does not have a `parent`)\nOr the person(s) who have converted the weights to this weights format.\n    (If this is a child weight, i.e. it has a `parent` field)",
                    "title": "Authors"
                },
                "parent": {
                    "anyOf": [
                        {
                            "enum": [
                                "keras_hdf5",
                                "onnx",
                                "pytorch_state_dict",
                                "tensorflow_js",
                                "tensorflow_saved_model_bundle",
                                "torchscript"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The source weights these weights were converted from.\nFor example, if a model's weights were converted from the `pytorch_state_dict` format to `torchscript`,\nThe `pytorch_state_dict` weights entry has no `parent` and is the parent of the `torchscript` weights.\nAll weight entries except one (the initial set of weights resulting from training the model),\nneed to have this field.",
                    "examples": [
                        "pytorch_state_dict"
                    ],
                    "title": "Parent"
                },
                "tensorflow_version": {
                    "$ref": "#/$defs/Version",
                    "description": "Version of the TensorFlow library used."
                }
            },
            "required": [
                "source",
                "tensorflow_version"
            ],
            "title": "TensorflowJsWeightsDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_5__TensorflowSavedModelBundleWeightsDescr": {
            "additionalProperties": false,
            "properties": {
                "source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        }
                    ],
                    "description": "\u2208\ud83d\udce6 The multi-file weights.\nAll required files/folders should be a zip archive.",
                    "title": "Source"
                },
                "sha256": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "SHA256 checksum of the source file",
                    "title": "Sha256"
                },
                "authors": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/$defs/Author"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Authors\nEither the person(s) that have trained this model resulting in the original weights file.\n    (If this is the initial weights entry, i.e. it does not have a `parent`)\nOr the person(s) who have converted the weights to this weights format.\n    (If this is a child weight, i.e. it has a `parent` field)",
                    "title": "Authors"
                },
                "parent": {
                    "anyOf": [
                        {
                            "enum": [
                                "keras_hdf5",
                                "onnx",
                                "pytorch_state_dict",
                                "tensorflow_js",
                                "tensorflow_saved_model_bundle",
                                "torchscript"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The source weights these weights were converted from.\nFor example, if a model's weights were converted from the `pytorch_state_dict` format to `torchscript`,\nThe `pytorch_state_dict` weights entry has no `parent` and is the parent of the `torchscript` weights.\nAll weight entries except one (the initial set of weights resulting from training the model),\nneed to have this field.",
                    "examples": [
                        "pytorch_state_dict"
                    ],
                    "title": "Parent"
                },
                "tensorflow_version": {
                    "$ref": "#/$defs/Version",
                    "description": "Version of the TensorFlow library used."
                },
                "dependencies": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/EnvironmentFileDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Custom dependencies beyond tensorflow.\nShould include tensorflow and any version pinning has to be compatible with `tensorflow_version`."
                }
            },
            "required": [
                "source",
                "tensorflow_version"
            ],
            "title": "TensorflowSavedModelBundleWeightsDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_5__TorchscriptWeightsDescr": {
            "additionalProperties": false,
            "properties": {
                "source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        }
                    ],
                    "description": "\u2208\ud83d\udce6 The weights file.",
                    "title": "Source"
                },
                "sha256": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "SHA256 checksum of the source file",
                    "title": "Sha256"
                },
                "authors": {
                    "anyOf": [
                        {
                            "items": {
                                "$ref": "#/$defs/Author"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Authors\nEither the person(s) that have trained this model resulting in the original weights file.\n    (If this is the initial weights entry, i.e. it does not have a `parent`)\nOr the person(s) who have converted the weights to this weights format.\n    (If this is a child weight, i.e. it has a `parent` field)",
                    "title": "Authors"
                },
                "parent": {
                    "anyOf": [
                        {
                            "enum": [
                                "keras_hdf5",
                                "onnx",
                                "pytorch_state_dict",
                                "tensorflow_js",
                                "tensorflow_saved_model_bundle",
                                "torchscript"
                            ],
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The source weights these weights were converted from.\nFor example, if a model's weights were converted from the `pytorch_state_dict` format to `torchscript`,\nThe `pytorch_state_dict` weights entry has no `parent` and is the parent of the `torchscript` weights.\nAll weight entries except one (the initial set of weights resulting from training the model),\nneed to have this field.",
                    "examples": [
                        "pytorch_state_dict"
                    ],
                    "title": "Parent"
                },
                "pytorch_version": {
                    "$ref": "#/$defs/Version",
                    "description": "Version of the PyTorch library used."
                }
            },
            "required": [
                "source",
                "pytorch_version"
            ],
            "title": "TorchscriptWeightsDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_5__WeightsDescr": {
            "additionalProperties": false,
            "properties": {
                "keras_hdf5": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/bioimageio__spec__model__v0_5__KerasHdf5WeightsDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "onnx": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/bioimageio__spec__model__v0_5__OnnxWeightsDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "pytorch_state_dict": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/bioimageio__spec__model__v0_5__PytorchStateDictWeightsDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "tensorflow_js": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/bioimageio__spec__model__v0_5__TensorflowJsWeightsDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "tensorflow_saved_model_bundle": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/bioimageio__spec__model__v0_5__TensorflowSavedModelBundleWeightsDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                },
                "torchscript": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/bioimageio__spec__model__v0_5__TorchscriptWeightsDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null
                }
            },
            "title": "WeightsDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_5__ZeroMeanUnitVarianceDescr": {
            "additionalProperties": false,
            "description": "Subtract mean and divide by variance.",
            "properties": {
                "id": {
                    "const": "zero_mean_unit_variance",
                    "default": "zero_mean_unit_variance",
                    "enum": [
                        "zero_mean_unit_variance"
                    ],
                    "title": "Id",
                    "type": "string"
                },
                "kwargs": {
                    "$ref": "#/$defs/bioimageio__spec__model__v0_5__ZeroMeanUnitVarianceKwargs"
                }
            },
            "required": [
                "kwargs"
            ],
            "title": "ZeroMeanUnitVarianceDescr",
            "type": "object"
        },
        "bioimageio__spec__model__v0_5__ZeroMeanUnitVarianceKwargs": {
            "additionalProperties": false,
            "description": "key word arguments for `ZeroMeanUnitVarianceDescr`",
            "properties": {
                "axes": {
                    "anyOf": [
                        {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The subset of axes to normalize jointly, i.e. axes to reduce to compute mean/std.\nFor example to normalize 'batch', 'x' and 'y' jointly in a tensor ('batch', 'channel', 'y', 'x')\nresulting in a tensor of equal shape normalized per channel, specify `axes=('batch', 'x', 'y')`.\nTo normalize each sample independently leave out the 'batch' axis.\nDefault: Scale all axes jointly.",
                    "examples": [
                        [
                            "batch",
                            "x",
                            "y"
                        ]
                    ],
                    "title": "Axes"
                },
                "eps": {
                    "default": 1e-06,
                    "description": "epsilon for numeric stability: `out = (tensor - mean) / (std + eps)`.",
                    "exclusiveMinimum": 0.0,
                    "maximum": 0.1,
                    "title": "Eps",
                    "type": "number"
                }
            },
            "title": "ZeroMeanUnitVarianceKwargs",
            "type": "object"
        },
        "bioimageio__spec__notebook__v0_2__NotebookDescr": {
            "additionalProperties": false,
            "description": "Bioimage.io description of a Jupyter Notebook.",
            "properties": {
                "name": {
                    "description": "A human-friendly name of the resource description",
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "description": {
                    "title": "Description",
                    "type": "string"
                },
                "covers": {
                    "description": "Cover images. Please use an image smaller than 500KB and an aspect ratio width to height of 2:1.\nThe supported image formats are: ('.gif', '.jpeg', '.jpg', '.png', '.svg', '.tif', '.tiff')",
                    "examples": [
                        "cover.png"
                    ],
                    "items": {
                        "anyOf": [
                            {
                                "format": "file-path",
                                "type": "string"
                            },
                            {
                                "$ref": "#/$defs/RelativeFilePath"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "title": "Covers",
                    "type": "array"
                },
                "id_emoji": {
                    "anyOf": [
                        {
                            "maxLength": 1,
                            "minLength": 1,
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "UTF-8 emoji for display alongside the `id`.",
                    "title": "Id Emoji"
                },
                "authors": {
                    "description": "The authors are the creators of the RDF and the primary points of contact.",
                    "items": {
                        "$ref": "#/$defs/Author"
                    },
                    "title": "Authors",
                    "type": "array"
                },
                "attachments": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/AttachmentsDescr"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "file and other attachments"
                },
                "cite": {
                    "description": "citations",
                    "items": {
                        "$ref": "#/$defs/CiteEntry"
                    },
                    "title": "Cite",
                    "type": "array"
                },
                "config": {
                    "additionalProperties": {
                        "$ref": "#/$defs/YamlValue"
                    },
                    "description": "A field for custom configuration that can contain any keys not present in the RDF spec.\nThis means you should not store, for example, a github repo URL in `config` since we already have the\n`git_repo` field defined in the spec.\nKeys in `config` may be very specific to a tool or consumer software. To avoid conflicting definitions,\nit is recommended to wrap added configuration into a sub-field named with the specific domain or tool name,\nfor example:\n```yaml\nconfig:\n    bioimageio:  # here is the domain name\n        my_custom_key: 3837283\n        another_key:\n            nested: value\n    imagej:       # config specific to ImageJ\n        macro_dir: path/to/macro/file\n```\nIf possible, please use [`snake_case`](https://en.wikipedia.org/wiki/Snake_case) for keys in `config`.\nYou may want to list linked files additionally under `attachments` to include them when packaging a resource\n(packaging a resource means downloading/copying important linked files and creating a ZIP archive that contains\nan altered rdf.yaml file with local references to the downloaded files)",
                    "examples": [
                        {
                            "bioimageio": {
                                "another_key": {
                                    "nested": "value"
                                },
                                "my_custom_key": 3837283
                            },
                            "imagej": {
                                "macro_dir": "path/to/macro/file"
                            }
                        }
                    ],
                    "title": "Config",
                    "type": "object"
                },
                "download_url": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "URL to download the resource from (deprecated)",
                    "title": "Download Url"
                },
                "git_repo": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A URL to the Git repository where the resource is being developed.",
                    "examples": [
                        "https://github.com/bioimage-io/spec-bioimage-io/tree/main/example_descriptions/models/unet2d_nuclei_broad"
                    ],
                    "title": "Git Repo"
                },
                "icon": {
                    "anyOf": [
                        {
                            "maxLength": 2,
                            "minLength": 1,
                            "type": "string"
                        },
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "An icon for illustration",
                    "title": "Icon"
                },
                "links": {
                    "description": "IDs of other bioimage.io resources",
                    "examples": [
                        [
                            "ilastik/ilastik",
                            "deepimagej/deepimagej",
                            "zero/notebook_u-net_3d_zerocostdl4mic"
                        ]
                    ],
                    "items": {
                        "type": "string"
                    },
                    "title": "Links",
                    "type": "array"
                },
                "uploader": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Uploader"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The person who uploaded the model (e.g. to bioimage.io)"
                },
                "maintainers": {
                    "description": "Maintainers of this resource.\nIf not specified `authors` are maintainers and at least some of them should specify their `github_user` name",
                    "items": {
                        "$ref": "#/$defs/Maintainer"
                    },
                    "title": "Maintainers",
                    "type": "array"
                },
                "rdf_source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "Resource description file (RDF) source; used to keep track of where an rdf.yaml was loaded from.\nDo not set this field in a YAML file.",
                    "title": "Rdf Source"
                },
                "tags": {
                    "description": "Associated tags",
                    "examples": [
                        [
                            "unet2d",
                            "pytorch",
                            "nucleus",
                            "segmentation",
                            "dsb2018"
                        ]
                    ],
                    "items": {
                        "type": "string"
                    },
                    "title": "Tags",
                    "type": "array"
                },
                "version": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Version"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The version of the resource following SemVer 2.0."
                },
                "version_number": {
                    "anyOf": [
                        {
                            "type": "integer"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "version number (n-th published version, not the semantic version)",
                    "title": "Version Number"
                },
                "format_version": {
                    "const": "0.2.4",
                    "default": "0.2.4",
                    "description": "The format version of this resource specification\n(not the `version` of the resource description)\nWhen creating a new resource always use the latest micro/patch version described here.\nThe `format_version` is important for any consumer software to understand how to parse the fields.",
                    "enum": [
                        "0.2.4"
                    ],
                    "title": "Format Version",
                    "type": "string"
                },
                "badges": {
                    "description": "badges associated with this resource",
                    "items": {
                        "$ref": "#/$defs/BadgeDescr"
                    },
                    "title": "Badges",
                    "type": "array"
                },
                "documentation": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "\u2208\ud83d\udce6 URL or relative path to a markdown file with additional documentation.\nThe recommended documentation file name is `README.md`. An `.md` suffix is mandatory.",
                    "examples": [
                        "https://raw.githubusercontent.com/bioimage-io/spec-bioimage-io/main/example_descriptions/models/unet2d_nuclei_broad/README.md",
                        "README.md"
                    ],
                    "title": "Documentation"
                },
                "license": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A [SPDX license identifier](https://spdx.org/licenses/).\nWe do not support custom license beyond the SPDX license list, if you need that please\n[open a GitHub issue](https://github.com/bioimage-io/spec-bioimage-io/issues/new/choose\n) to discuss your intentions with the community.",
                    "examples": [
                        "CC0-1.0",
                        "MIT",
                        "BSD-2-Clause"
                    ],
                    "title": "License"
                },
                "type": {
                    "const": "notebook",
                    "default": "notebook",
                    "enum": [
                        "notebook"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "bioimage.io-wide unique resource identifier\nassigned by bioimage.io; version **un**specific.",
                    "title": "Id"
                },
                "source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        }
                    ],
                    "description": "The Jupyter notebook",
                    "title": "Source"
                }
            },
            "required": [
                "name",
                "description",
                "source"
            ],
            "title": "bioimage.io notebook specification",
            "type": "object"
        },
        "bioimageio__spec__notebook__v0_3__NotebookDescr": {
            "additionalProperties": false,
            "description": "Bioimage.io description of a Jupyter notebook.",
            "properties": {
                "name": {
                    "description": "A human-friendly name of the resource description.\nMay only contains letters, digits, underscore, minus, parentheses and spaces.",
                    "maxLength": 128,
                    "minLength": 1,
                    "title": "Name",
                    "type": "string"
                },
                "description": {
                    "description": "A string containing a brief description.",
                    "maxLength": 1024,
                    "title": "Description",
                    "type": "string"
                },
                "covers": {
                    "description": "Cover images. Please use an image smaller than 500KB and an aspect ratio width to height of 2:1 or 1:1.\nThe supported image formats are: ('.gif', '.jpeg', '.jpg', '.png', '.svg')",
                    "examples": [],
                    "items": {
                        "anyOf": [
                            {
                                "format": "file-path",
                                "type": "string"
                            },
                            {
                                "$ref": "#/$defs/RelativeFilePath"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "title": "Covers",
                    "type": "array"
                },
                "id_emoji": {
                    "anyOf": [
                        {
                            "maxLength": 2,
                            "minLength": 1,
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "UTF-8 emoji for display alongside the `id`.",
                    "title": "Id Emoji"
                },
                "authors": {
                    "description": "The authors are the creators of this resource description and the primary points of contact.",
                    "items": {
                        "$ref": "#/$defs/Author"
                    },
                    "minItems": 1,
                    "title": "Authors",
                    "type": "array"
                },
                "attachments": {
                    "description": "file attachments",
                    "items": {
                        "$ref": "#/$defs/FileDescr"
                    },
                    "title": "Attachments",
                    "type": "array"
                },
                "cite": {
                    "description": "citations",
                    "items": {
                        "$ref": "#/$defs/CiteEntry"
                    },
                    "minItems": 1,
                    "title": "Cite",
                    "type": "array"
                },
                "license": {
                    "description": "A [SPDX license identifier](https://spdx.org/licenses/).\nWe do not support custom license beyond the SPDX license list, if you need that please\n[open a GitHub issue](https://github.com/bioimage-io/spec-bioimage-io/issues/new/choose)\nto discuss your intentions with the community.",
                    "examples": [
                        "CC0-1.0",
                        "MIT",
                        "BSD-2-Clause"
                    ],
                    "title": "License",
                    "type": "string"
                },
                "config": {
                    "additionalProperties": {
                        "$ref": "#/$defs/YamlValue"
                    },
                    "description": "A field for custom configuration that can contain any keys not present in the RDF spec.\nThis means you should not store, for example, a GitHub repo URL in `config` since there is a `git_repo` field.\nKeys in `config` may be very specific to a tool or consumer software. To avoid conflicting definitions,\nit is recommended to wrap added configuration into a sub-field named with the specific domain or tool name,\nfor example:\n```yaml\nconfig:\n    bioimageio:  # here is the domain name\n        my_custom_key: 3837283\n        another_key:\n            nested: value\n    imagej:       # config specific to ImageJ\n        macro_dir: path/to/macro/file\n```\nIf possible, please use [`snake_case`](https://en.wikipedia.org/wiki/Snake_case) for keys in `config`.\nYou may want to list linked files additionally under `attachments` to include them when packaging a resource.\n(Packaging a resource means downloading/copying important linked files and creating a ZIP archive that contains\nan altered rdf.yaml file with local references to the downloaded files.)",
                    "examples": [
                        {
                            "bioimageio": {
                                "another_key": {
                                    "nested": "value"
                                },
                                "my_custom_key": 3837283
                            },
                            "imagej": {
                                "macro_dir": "path/to/macro/file"
                            }
                        }
                    ],
                    "title": "Config",
                    "type": "object"
                },
                "git_repo": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "A URL to the Git repository where the resource is being developed.",
                    "examples": [
                        "https://github.com/bioimage-io/spec-bioimage-io/tree/main/example_descriptions/models/unet2d_nuclei_broad"
                    ],
                    "title": "Git Repo"
                },
                "icon": {
                    "anyOf": [
                        {
                            "maxLength": 2,
                            "minLength": 1,
                            "type": "string"
                        },
                        {
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "An icon for illustration, e.g. on bioimage.io",
                    "title": "Icon"
                },
                "links": {
                    "description": "IDs of other bioimage.io resources",
                    "examples": [
                        [
                            "ilastik/ilastik",
                            "deepimagej/deepimagej",
                            "zero/notebook_u-net_3d_zerocostdl4mic"
                        ]
                    ],
                    "items": {
                        "type": "string"
                    },
                    "title": "Links",
                    "type": "array"
                },
                "uploader": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Uploader"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The person who uploaded the model (e.g. to bioimage.io)"
                },
                "maintainers": {
                    "description": "Maintainers of this resource.\nIf not specified, `authors` are maintainers and at least some of them has to specify their `github_user` name",
                    "items": {
                        "$ref": "#/$defs/Maintainer"
                    },
                    "title": "Maintainers",
                    "type": "array"
                },
                "tags": {
                    "description": "Associated tags",
                    "examples": [
                        [
                            "unet2d",
                            "pytorch",
                            "nucleus",
                            "segmentation",
                            "dsb2018"
                        ]
                    ],
                    "items": {
                        "type": "string"
                    },
                    "title": "Tags",
                    "type": "array"
                },
                "version": {
                    "anyOf": [
                        {
                            "$ref": "#/$defs/Version"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The version of the resource following SemVer 2.0."
                },
                "format_version": {
                    "const": "0.3.0",
                    "default": "0.3.0",
                    "description": "The **format** version of this resource specification",
                    "enum": [
                        "0.3.0"
                    ],
                    "title": "Format Version",
                    "type": "string"
                },
                "documentation": {
                    "anyOf": [
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        },
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "\u2208\ud83d\udce6 URL or relative path to a markdown file encoded in UTF-8 with additional documentation.\nThe recommended documentation file name is `README.md`. An `.md` suffix is mandatory.",
                    "examples": [
                        "https://raw.githubusercontent.com/bioimage-io/spec-bioimage-io/main/example_descriptions/models/unet2d_nuclei_broad/README.md",
                        "README.md"
                    ],
                    "title": "Documentation"
                },
                "badges": {
                    "description": "badges associated with this resource",
                    "items": {
                        "$ref": "#/$defs/BadgeDescr"
                    },
                    "title": "Badges",
                    "type": "array"
                },
                "type": {
                    "const": "notebook",
                    "default": "notebook",
                    "enum": [
                        "notebook"
                    ],
                    "title": "Type",
                    "type": "string"
                },
                "id": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "bioimage.io-wide unique resource identifier\nassigned by bioimage.io; version **un**specific.",
                    "title": "Id"
                },
                "parent": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "null"
                        }
                    ],
                    "default": null,
                    "description": "The description from which this one is derived",
                    "title": "Parent"
                },
                "source": {
                    "anyOf": [
                        {
                            "type": "string"
                        },
                        {
                            "format": "file-path",
                            "type": "string"
                        },
                        {
                            "$ref": "#/$defs/RelativeFilePath"
                        }
                    ],
                    "description": "The Jupyter notebook",
                    "title": "Source"
                }
            },
            "required": [
                "name",
                "description",
                "authors",
                "cite",
                "license",
                "source"
            ],
            "title": "bioimage.io notebook specification",
            "type": "object"
        }
    },
    "discriminator": {
        "mapping": {
            "application": {
                "discriminator": {
                    "mapping": {
                        "0.2.4": "#/$defs/bioimageio__spec__application__v0_2__ApplicationDescr",
                        "0.3.0": "#/$defs/bioimageio__spec__application__v0_3__ApplicationDescr"
                    },
                    "propertyName": "format_version"
                },
                "oneOf": [
                    {
                        "$ref": "#/$defs/bioimageio__spec__application__v0_2__ApplicationDescr"
                    },
                    {
                        "$ref": "#/$defs/bioimageio__spec__application__v0_3__ApplicationDescr"
                    }
                ]
            },
            "dataset": {
                "discriminator": {
                    "mapping": {
                        "0.2.4": "#/$defs/bioimageio__spec__dataset__v0_2__DatasetDescr",
                        "0.3.0": "#/$defs/bioimageio__spec__dataset__v0_3__DatasetDescr"
                    },
                    "propertyName": "format_version"
                },
                "oneOf": [
                    {
                        "$ref": "#/$defs/bioimageio__spec__dataset__v0_2__DatasetDescr"
                    },
                    {
                        "$ref": "#/$defs/bioimageio__spec__dataset__v0_3__DatasetDescr"
                    }
                ]
            },
            "model": {
                "discriminator": {
                    "mapping": {
                        "0.4.10": "#/$defs/bioimageio__spec__model__v0_4__ModelDescr",
                        "0.5.3": "#/$defs/bioimageio__spec__model__v0_5__ModelDescr"
                    },
                    "propertyName": "format_version"
                },
                "oneOf": [
                    {
                        "$ref": "#/$defs/bioimageio__spec__model__v0_4__ModelDescr"
                    },
                    {
                        "$ref": "#/$defs/bioimageio__spec__model__v0_5__ModelDescr"
                    }
                ]
            },
            "notebook": {
                "discriminator": {
                    "mapping": {
                        "0.2.4": "#/$defs/bioimageio__spec__notebook__v0_2__NotebookDescr",
                        "0.3.0": "#/$defs/bioimageio__spec__notebook__v0_3__NotebookDescr"
                    },
                    "propertyName": "format_version"
                },
                "oneOf": [
                    {
                        "$ref": "#/$defs/bioimageio__spec__notebook__v0_2__NotebookDescr"
                    },
                    {
                        "$ref": "#/$defs/bioimageio__spec__notebook__v0_3__NotebookDescr"
                    }
                ]
            }
        },
        "propertyName": "type"
    },
    "oneOf": [
        {
            "discriminator": {
                "mapping": {
                    "0.2.4": "#/$defs/bioimageio__spec__application__v0_2__ApplicationDescr",
                    "0.3.0": "#/$defs/bioimageio__spec__application__v0_3__ApplicationDescr"
                },
                "propertyName": "format_version"
            },
            "oneOf": [
                {
                    "$ref": "#/$defs/bioimageio__spec__application__v0_2__ApplicationDescr"
                },
                {
                    "$ref": "#/$defs/bioimageio__spec__application__v0_3__ApplicationDescr"
                }
            ]
        },
        {
            "discriminator": {
                "mapping": {
                    "0.2.4": "#/$defs/bioimageio__spec__dataset__v0_2__DatasetDescr",
                    "0.3.0": "#/$defs/bioimageio__spec__dataset__v0_3__DatasetDescr"
                },
                "propertyName": "format_version"
            },
            "oneOf": [
                {
                    "$ref": "#/$defs/bioimageio__spec__dataset__v0_2__DatasetDescr"
                },
                {
                    "$ref": "#/$defs/bioimageio__spec__dataset__v0_3__DatasetDescr"
                }
            ]
        },
        {
            "discriminator": {
                "mapping": {
                    "0.4.10": "#/$defs/bioimageio__spec__model__v0_4__ModelDescr",
                    "0.5.3": "#/$defs/bioimageio__spec__model__v0_5__ModelDescr"
                },
                "propertyName": "format_version"
            },
            "oneOf": [
                {
                    "$ref": "#/$defs/bioimageio__spec__model__v0_4__ModelDescr"
                },
                {
                    "$ref": "#/$defs/bioimageio__spec__model__v0_5__ModelDescr"
                }
            ]
        },
        {
            "discriminator": {
                "mapping": {
                    "0.2.4": "#/$defs/bioimageio__spec__notebook__v0_2__NotebookDescr",
                    "0.3.0": "#/$defs/bioimageio__spec__notebook__v0_3__NotebookDescr"
                },
                "propertyName": "format_version"
            },
            "oneOf": [
                {
                    "$ref": "#/$defs/bioimageio__spec__notebook__v0_2__NotebookDescr"
                },
                {
                    "$ref": "#/$defs/bioimageio__spec__notebook__v0_3__NotebookDescr"
                }
            ]
        }
    ]
}