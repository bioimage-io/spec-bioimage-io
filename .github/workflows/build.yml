name: Test and Deploy bioimageio.spec

on:
  push:
    branches: [main]
  pull_request:
    branches: ['**']

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        pydantic-version: ['2.10.6', '2.11.9']
        include:
          - python-version: '3.10'
            pydantic-version: '2.11.9'
            is-dev-version: true
            run-expensive-tests: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pydantic~=${{matrix.pydantic-version }} -e .[dev]
      - name: Get Date
        id: get-date
        run: |
          echo "date=$(date +'%Y-%b')"
          echo "date=$(date +'%Y-%b')" >> $GITHUB_OUTPUT
        shell: bash
      - uses: actions/cache/restore@v4
        with:
          path: bioimageio_cache
          key: 'py${{ matrix.python-version }}-${{ steps.get-date.outputs.date }}'
      - name: Check autogenerated imports
        run: python scripts/generate_version_submodule_imports.py check
      - run: ruff check
        if: matrix.is-dev-version
      - run: ruff format
        if: matrix.is-dev-version
      - name: Run Pyright
        if: matrix.is-dev-version
        run: |
          pyright --version
          pyright -p pyproject.toml --pythonversion ${{ matrix.python-version }}
      - run: pytest -v --cov bioimageio --cov-append --capture no
        env:
          BIOIMAGEIO_CACHE_PATH: bioimageio_cache
          RUN_EXPENSIVE_TESTS: ${{ matrix.run-expensive-tests && 'true' || 'false' }}
      - run: pytest -v --cov bioimageio --cov-append --capture no scripts # also test docstrings in scripts for dev-version
        if: ${{matrix.is-dev-version}}
        env:
          BIOIMAGEIO_CACHE_PATH: bioimageio_cache
          RUN_EXPENSIVE_TESTS: ${{ matrix.run-expensive-tests && 'true' || 'false' }}
      - uses: actions/cache/save@v4
        # explicit restore/save instead of cache action to cache even if coverage fails
        with:
          path: bioimageio_cache
          key: 'py${{ matrix.python-version }}-${{ steps.get-date.outputs.date }}'

      - run: cp .coverage .coverage.${{ matrix.python-version }}-${{ matrix.pydantic-version }}
      - uses: actions/upload-artifact@v4
        with:
          name: .coverage.${{ matrix.python-version }}-${{ matrix.pydantic-version }}
          retention-days: 1
          path: .coverage.${{ matrix.python-version }}-${{ matrix.pydantic-version }}
          include-hidden-files: true
  coverage:
    needs: [test]
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v6
      - run: |
          pip install coverage
      - uses: actions/download-artifact@v4
        with:
          pattern: .coverage.*
          merge-multiple: true
      - run: |
          ls -la .coverage*
          coverage combine
          coverage xml -o coverage.xml
      - uses: orgoro/coverage@v3.2
        with:
          coverageFile: coverage.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          thresholdAll: 0.7
          thresholdNew: 0.9
          thresholdModified: 0.6
      - name: generate coverage badge and html report
        run: |
          pip install genbadge[coverage]
          genbadge coverage --input-file coverage.xml --output-file ./dist/coverage/coverage-badge.svg
          coverage html -d dist/coverage
      - uses: actions/upload-artifact@v4
        with:
          name: coverage-summary
          retention-days: 1
          path: dist

  deploy:
    needs: [test, coverage]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: coverage-summary
          path: dist
      - uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -e .[dev]
      - name: Generate spec docs
        run: python scripts/generate_spec_documentation.py --dist dist/user_docs
      - name: Generate interactive documentation
        env:
          PYTHONPATH: './scripts'
        run: python -m interactive_docs
      - name: Generate JSON schema documentation
        run: python scripts/generate_json_schema_documentation.py
      - name: Generate developer docs
        run: ./scripts/pdoc/run.sh
      - name: copy legacy file until BioImage.IO-packager is updated # TODO: remove if packager does not depend on it anymore
        run: cp weight_formats_spec.json ./dist/weight_formats_spec.json
      - name: Get branch name to deploy to
        id: get_branch
        shell: bash
        run: |
          if [[ -n '${{ github.event.pull_request.head.ref }}' ]]; then branch=gh-pages-${{ github.event.pull_request.head.ref }}; else branch=gh-pages; fi
          echo "::set-output name=branch::$branch"
      - name: Deploy to ${{ steps.get_branch.outputs.branch }} ðŸš€
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: ${{ steps.get_branch.outputs.branch }}
          folder: dist

  conda-build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          auto-activate-base: true
          activate-environment: ''
          channel-priority: strict
          miniforge-version: latest
          conda-solver: libmamba
      - name: install common conda dependencies
        run: conda install -n base -c conda-forge conda-build -y
      - uses: actions/cache@v4
        with:
          path: |
            pkgs/noarch
            pkgs/channeldata.json
          key: ${{ github.sha }}-packages
      - name: linux conda build test
        shell: bash -l {0}
        run: |
          mkdir -p ./pkgs/noarch
          conda-build -c conda-forge conda-recipe --output-folder ./pkgs

  #  rattler-build:
  #    name: Build package
  #    runs-on: ubuntu-latest
  #    steps:
  #    - uses: actions/checkout@v4
  #    - name: Build conda package
  #      uses: prefix-dev/rattler-build-action@v0.2.2
  #      with:
  #        recipe-path: conda-recipe/recipe.yaml

  pip-build:
    name: Build and publish to PyPI
    needs: [test, conda-build]
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip --version
          pip install --upgrade build
          pip install .
      - name: Check if there is a parent commit
        id: check-parent-commit
        run: |
          echo "sha=$(git rev-parse --verify --quiet HEAD^)" >> $GITHUB_OUTPUT

      - name: Detect new version
        id: check-version
        if: github.ref == 'refs/heads/main' && steps.check-parent-commit.outputs.sha
        uses: salsify/action-detect-and-tag-new-version@v2.0.3
        with:
          create-tag: false
          version-command: |
            python -c "from pathlib import Path;print(p_version.read_text().split('VERSION = \"')[1].split('\"')[0] if (p_version:=Path('src/bioimageio/spec/_version.py')).exists() else Path('src/bioimageio/spec/__init__.py').read_text().split('__version__ = \"')[1].split('\"')[0])"
      - name: Push tag
        id: tag-version
        if: github.ref == 'refs/heads/main' && steps.check-version.outputs.previous-version != steps.check-version.outputs.current-version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.check-version.outputs.current-version }}

      - name: Build package
        run: |
          python -m build

      - name: Publish package on PyPI
        if: github.ref == 'refs/heads/main' && steps.tag-version.outputs.new_tag
        uses: pypa/gh-action-pypi-publish@release/v1.12
        with:
          user: __token__
          password: '${{ secrets.PYPI_TOKEN }}'
          packages-dir: dist/

      - name: Publish the release notes
        if: github.ref == 'refs/heads/main'
        uses: release-drafter/release-drafter@v6.0.0
        with:
          publish: "${{ steps.tag-version.outputs.new_tag != '' }}"
          tag: '${{ steps.tag-version.outputs.new_tag }}'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
